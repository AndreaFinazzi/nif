//  Copyright (c) 2021 Unmanned System Research Group @ KAIST
//  Author:

//
// Created by usrg on 6/23/21.
//

#ifndef ROS2MASTER_CONTROL_SAFETY_LAYER_NODE_H
#define ROS2MASTER_CONTROL_SAFETY_LAYER_NODE_H

#include <nav_msgs/msg/odometry.hpp>
#include <queue>

#include "nif_common/constants.h"
#include "nif_common/types.h"
#include "nif_common_nodes/i_base_synchronized_node.h"
#include "nif_control_common/control_command_compare.h"

#include <PID.hpp>

#include "rclcpp/rclcpp.hpp"

namespace nif {
namespace control {

struct GearState {
    int gear;
    double gearRatio;
    double downshiftSpeed;
    double upshiftSpeed;
    GearState(int gear, double gearRatio, double downshiftSpeed,
              double upshiftSpeed) {
        this->gear = gear;
        this->gearRatio = gearRatio;
        this->downshiftSpeed = downshiftSpeed;
        this->upshiftSpeed = upshiftSpeed;
    }
};

/**
 * ControlSafetyLayerNode is responsible to send the final control message to
 * the car. It stores the control commands generated by one or more controllers,
 * and it submits the [best] available control to the vehicle interface. Being
 * subclass of IBaseSynchronizedNode, its run() function is called with a fixed
 * frequency.
 *
 * Its input is of type ControlCommand, which contains the set of controls that
 * the car interface can accept, but as an output each control value is also
 * sent separately.
 *
 */
class ControlSafetyLayerNode : public nif::common::IBaseSynchronizedNode {
public:

  /**
   * Initialize ControlSafetyNodeLayer with custom period.
   * @param node_name
   * @param options
   * @param period Custom synchronization period. It's passed to
   * IBaseSynchronizedNode and determines the frequency run() is called at.
   */template <class DurationRepT, class DurationT>
  ControlSafetyLayerNode(
      const std::string &node_name,
      const std::chrono::duration<DurationRepT, DurationT> period = common::constants::SYNC_PERIOD_DEFAULT_US,
      const rclcpp::NodeOptions &options = rclcpp::NodeOptions{})

      : IBaseSynchronizedNode(node_name, common::NodeType::CONTROL, period, options),
         control_buffer()

  {
    this->control_sub =
        this->create_subscription<nif::common::msgs::ControlCmd>(
            "in_control_cmd", nif::common::constants::QOS_CONTROL_CMD,
            std::bind(&ControlSafetyLayerNode::controlCallback, this,
                      std::placeholders::_1));

    this->control_override_sub =
        this->create_subscription<nif::common::msgs::ControlCmd>(
            "in_override_control_cmd", nif::common::constants::QOS_CONTROL_CMD_OVERRIDE,
            std::bind(&ControlSafetyLayerNode::controlOverrideCallback, this,
                      std::placeholders::_1));

    this->control_pub = this->create_publisher<nif::common::msgs::ControlCmd>(
        "out_control_cmd",nif::common::constants::QOS_CONTROL_CMD);

    this->steering_control_pub =
        this->create_publisher<nif::common::msgs::ControlSteeringCmd>(
            "out_steering_control_cmd", nif::common::constants::QOS_CONTROL_CMD);

    this->accelerator_control_pub =
        this->create_publisher<nif::common::msgs::ControlAcceleratorCmd>(
            "out_accelerator_control_cmd", nif::common::constants::QOS_CONTROL_CMD);

    this->braking_control_pub =
        this->create_publisher<nif::common::msgs::ControlBrakingCmd>(
            "out_braking_control_cmd", nif::common::constants::QOS_CONTROL_CMD);

    this->gear_control_pub =
        this->create_publisher<nif::common::msgs::ControlGearCmd>(
            "out_gear_control_cmd", nif::common::constants::QOS_CONTROL_CMD);

    // Automatically boot with lateral_tracking_enabled
    this->declare_parameter("lateral_tracking_enabled", false);
    // Max Steering Angle in Degrees
    this->declare_parameter("max_steering_angle_deg", 20.0);
    // Degrees at which to automatically revert to the override
    this->declare_parameter("steering_auto_override_deg", 4.0);
    // convert from degress to steering units (should be 1 - 1 ?)
    this->declare_parameter("steering_units_multiplier", 1.0);

    // Safety timeouts for odometry and the path. If exceeded, toggle emergency.
    this->declare_parameter("odometry_timeout_sec", 0.1);
    this->declare_parameter("path_timeout_sec", 0.5);
    // Limit the max change in the steering signal over time
    this->declare_parameter("steering_max_ddeg_dt", 5.0);

    //  Invert steering command for simulation
    this->declare_parameter("invert_steering", false);

    // Read in misc. parameters
    max_steering_angle_deg =
        this->get_parameter("max_steering_angle_deg").as_double();
    steering_auto_override_deg =
        this->get_parameter("steering_auto_override_deg").as_double();
    steering_units_multiplier =
        this->get_parameter("steering_units_multiplier").as_double();

    odometry_timeout_sec =
        this->get_parameter("odometry_timeout_sec").as_double();

    path_timeout_sec =
        this->get_parameter("path_timeout_sec").as_double();

    steering_max_ddeg_dt =
        this->get_parameter("steering_max_ddeg_dt").as_double();

    if (  (odometry_timeout_sec) < 0. ||
    (path_timeout_sec) < 0.) {
      throw rclcpp::exceptions::InvalidParametersException("odometry_timeout_sec or path_timeout_sec parameter is negative.");
    }

    this->parameters_callback_handle = this->add_on_set_parameters_callback(
        std::bind(&ControlSafetyLayerNode::parametersCallback, this, std::placeholders::_1));

//  EMERGENCY LONG CONTROL FEATURES
    this->initializeGears();






    this->setNodeStatus(common::NODE_INITIALIZED);
  }

private:
  /**
   * Check if msg is valid, then push it in the ControlCmd buffer.
   * @param msg
   */
  void bufferStore(nif::common::msgs::ControlCmd::SharedPtr msg);
  void bufferFlush();
  uint8_t getCommandsCount() const {
    return control_buffer.size();
  }
  // Prevent default constructor to be called from the outside
  ControlSafetyLayerNode();

  // emergency lane flag. Activated in case of emergency.
  bool emergency_lane_enabled = false;

  // Automatically boot with lateral_tracking_enabled
  bool lateral_tracking_enabled;

  // Max Steering Angle in Degrees
  double max_steering_angle_deg;

  // Degrees at which to automatically revert to the override
  double steering_auto_override_deg;

  // convert from degress to steering units (should be 1 - 1 ?)
  double steering_units_multiplier;

  // Safety timeouts for odometry and the path. If exceeded, toggle emergency.
  double odometry_timeout_sec;
  // Safety timeouts for odometry and the path. If exceeded, toggle emergency.
  double path_timeout_sec;

  // Maximum steering speed [deg/sec]
  double steering_max_ddeg_dt;

  // Maximum steering speed [deg/sec]
  bool invert_steering;

//OVERRIDE SIIGNALS
  nif::common::msgs::ControlCmd override_control_cmd;
  nif::common::msgs::ControlCmd last_control_cmd;
  nif::common::msgs::ControlCmd control_cmd;
  rclcpp::Time override_last_update;

  /**
   * Stores control commands coming from the controllers' stack. It's flushed at
   * every iteration by run(), that is it must store only the controls relative
   * to a time quantum.
   */
  std::priority_queue<nif::common::msgs::ControlCmd::SharedPtr,
                      std::vector<nif::common::msgs::ControlCmd::SharedPtr>,
                      nif::control::ControlCommandCompare> control_buffer;

  /**
   * Subscriber to the topic of control commands. Each incoming command is then
   * saved in the buffer (should check the age).
   */
  rclcpp::Subscription<nif::common::msgs::ControlCmd>::SharedPtr control_sub;

  /**
 * Subscriber to the 'privileged' topic of override control commands.
 * If over a certain threshold, this control command is used instead of the ones in the control buffer.
 */
  rclcpp::Subscription<nif::common::msgs::ControlCmd>::SharedPtr control_override_sub;


  /**
   * Control publisher. Publishes the effective command to the vehicle interface
   * topic.
   */
  rclcpp::Publisher<nif::common::msgs::ControlCmd>::SharedPtr control_pub;

  /**
   * Steering Control publisher. Publishes the effective command to the vehicle
   * interface topic.
   */
  rclcpp::Publisher<nif::common::msgs::ControlSteeringCmd>::SharedPtr
      steering_control_pub;

  /**
   * Accelerator Control publisher. Publishes the effective command to the
   * vehicle interface topic.
   */
  rclcpp::Publisher<nif::common::msgs::ControlAcceleratorCmd>::SharedPtr
      accelerator_control_pub;

  /**
   * Braking Control publisher. Publishes the effective command to the vehicle
   * interface topic.
   */
  rclcpp::Publisher<nif::common::msgs::ControlBrakingCmd>::SharedPtr
      braking_control_pub;

  /**
   * Gear Control publisher. Publishes the effective command to the vehicle
   * interface topic.
   */
  rclcpp::Publisher<nif::common::msgs::ControlGearCmd>::SharedPtr
      gear_control_pub;

  std::map<int, std::shared_ptr<GearState>> gear_states;
  std::shared_ptr<control::GearState> curr_gear_ptr_;

  PID vel_pid_;
  PID brake_pid_;

  void controlCallback(const nif::common::msgs::ControlCmd::SharedPtr msg);
  void controlOverrideCallback(const nif::common::msgs::ControlCmd::UniquePtr msg);
  rcl_interfaces::msg::SetParametersResult
  parametersCallback(const std::vector<rclcpp::Parameter> &vector);
  void run() override;

  bool publishSteeringCmd(const nif::common::msgs::ControlSteeringCmd &msg) const;
  bool publishAcceleratorCmd(const nif::common::msgs::ControlAcceleratorCmd &msg) const;
  bool publishBrakingCmd(const nif::common::msgs::ControlBrakingCmd &msg) const;
  bool publishGearCmd(const nif::common::msgs::ControlGearCmd &msg) const;

    void afterSystemStatusCallback() override;

    void initializeGears() {
        // LOR params
        // this->gear_states = {
        //    {1, std::make_shared<control::GearState>(1, 2.92, -255, 11)},
        //    {2, std::make_shared<control::GearState>(2, 1.875, 9.5, 16)},
        //    {3, std::make_shared<control::GearState>(3, 1.38, 14, 22)},
        //    {4, std::make_shared<control::GearState>(4, 1.5, 17, 30)},
        //    {5, std::make_shared<control::GearState>(5, 0.96, 22, 35)},
        //    {6, std::make_shared<control::GearState>(6, 0.889, 30, 255)}};

        // IMS params
        this->gear_states = {
                {1, std::make_shared<control::GearState>(1, 2.92, -255, 11)},
                {2, std::make_shared<control::GearState>(2, 1.875, 9.5, 22)},
                {3, std::make_shared<control::GearState>(3, 1.38, 19.5, 28.5)},
                {4, std::make_shared<control::GearState>(4, 1.5, 25, 37.5)},
                {5, std::make_shared<control::GearState>(5, 0.96, 35, 44)},
                {6, std::make_shared<control::GearState>(6, 0.889, 41.5, 255)}};

        this->curr_gear_ptr_ = this->gear_states[1];
    }
    //  TODO define safety checks functions

};
} // namespace control
} // namespace nif

#endif // ROS2MASTER_CONTROL_SAFETY_LAYER_NODE_H

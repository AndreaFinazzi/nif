/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Sat Jul 24 19:28:34 2021.
 */

#ifndef MRR_PCAN_CORE_V07_02_H
#define MRR_PCAN_CORE_V07_02_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_FRAME_ID (0x2a1u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_FRAME_ID (0x22u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_FRAME_ID (0x21u)
#define MRR_PCAN_CORE_V07_02_SYNC_TIMESTAMP_FRAME_ID (0x03u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DAQ_RESP_FRAME_ID (0x1f4u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_RESP_FRAME_ID (0x1f3u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_REQ_FRAME_ID (0x1f2u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_RESP_FRAME_ID (0x1f1u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_REQ_FRAME_ID (0x1f0u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_FUNC_FRAME_ID (0x7dfu)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_RESP_PHYS_FRAME_ID (0x76cu)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_PHYS_FRAME_ID (0x764u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_FRAME_ID (0x4fbu)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_FRAME_ID (0x4fcu)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FRAME_ID (0x4fau)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_FRAME_ID (0x4f9u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SERIAL_NUMBER_FRAME_ID (0x105u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_CONTROL_FRAME_ID (0x10u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SW_VERSION_FRAME_ID (0x108u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_FRAME_ID (0x202u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_FRAME_ID (0x08u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_FRAME_ID (0x15u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART3_FRAME_ID (0x07u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART2_FRAME_ID (0x06u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART1_FRAME_ID (0x05u)
#define MRR_PCAN_CORE_V07_02_LROS_ODOMETER_VALUE_FRAME_ID (0x04u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_FRAME_ID (0x02u)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_FRAME_ID (0x01u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_VFPCAN_VERSION_FRAME_ID (0x201u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_HOST_CAN_VERSION_FRAME_ID (0x200u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_POSITION_FRAME_ID (0x175u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_COVERAGE_FRAME_ID (0x174u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_FRAME_ID (0x173u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_TIMESTAMPS_FRAME_ID (0x171u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_INFORMATION_DETECTIONS_FRAME_ID (0x170u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_FRAME_ID (0x10eu)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_TEMP_VOLT_FRAME_ID (0x109u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_FRAME_ID (0x20u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_FRAME_ID (0x10du)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_FRAME_ID (0x123u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY2_FRAME_ID (0x14u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY1_FRAME_ID (0x13u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_FRAME_ID (0x12u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_FRAME_ID (0x11u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_FRAME_ID (0x10cu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_FRAME_ID (0x15fu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_FRAME_ID (0x15eu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_FRAME_ID (0x15du)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_FRAME_ID (0x15cu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_FRAME_ID (0x15bu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_FRAME_ID (0x15au)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_FRAME_ID (0x159u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_FRAME_ID (0x158u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_FRAME_ID (0x157u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_FRAME_ID (0x156u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_FRAME_ID (0x14fu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_FRAME_ID (0x14eu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_FRAME_ID (0x14du)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_FRAME_ID (0x14cu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_FRAME_ID (0x14bu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_FRAME_ID (0x14au)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_FRAME_ID (0x149u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_FRAME_ID (0x148u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_FRAME_ID (0x147u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_FRAME_ID (0x145u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_FRAME_ID (0x144u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_FRAME_ID (0x143u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_FRAME_ID (0x142u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_FRAME_ID (0x141u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_FRAME_ID (0x140u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_FRAME_ID (0x13fu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_FRAME_ID (0x13eu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_FRAME_ID (0x13du)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_FRAME_ID (0x13cu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_FRAME_ID (0x13au)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_FRAME_ID (0x139u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_FRAME_ID (0x138u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_FRAME_ID (0x137u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_FRAME_ID (0x136u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_FRAME_ID (0x135u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_FRAME_ID (0x134u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_FRAME_ID (0x133u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_FRAME_ID (0x132u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_FRAME_ID (0x131u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_FRAME_ID (0x155u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_FRAME_ID (0x154u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_FRAME_ID (0x153u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_FRAME_ID (0x152u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_FRAME_ID (0x151u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_FRAME_ID (0x150u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_FRAME_ID (0x146u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_FRAME_ID (0x13bu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_FRAME_ID (0x130u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_FRAME_ID (0x12fu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_FRAME_ID (0x12eu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_FRAME_ID (0x12du)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_FRAME_ID (0x12cu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_FRAME_ID (0x12bu)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_FRAME_ID (0x12au)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_FRAME_ID (0x129u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_FRAME_ID (0x128u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_FRAME_ID (0x127u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_FRAME_ID (0x126u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_FRAME_ID (0x125u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_FRAME_ID (0x124u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_FRAME_ID (0x122u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_FRAME_ID (0x121u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_CAN_VERSION_FRAME_ID (0x100u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_FRAME_ID (0x101u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_FRAME_ID (0x120u)

/* Frame lengths in bytes. */
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYNC_TIMESTAMP_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DAQ_RESP_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_RESP_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_REQ_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_RESP_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_REQ_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_FUNC_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_RESP_PHYS_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_PHYS_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SERIAL_NUMBER_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_CONTROL_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SW_VERSION_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART3_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART2_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART1_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_ODOMETER_VALUE_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_VFPCAN_VERSION_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_HOST_CAN_VERSION_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_POSITION_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_COVERAGE_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_TIMESTAMPS_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_INFORMATION_DETECTIONS_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_TEMP_VOLT_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY2_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY1_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_CAN_VERSION_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_LENGTH (8u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_LENGTH (8u)

/* Extended or standard frame types. */
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYNC_TIMESTAMP_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DAQ_RESP_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_RESP_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_REQ_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_RESP_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_REQ_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_FUNC_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_RESP_PHYS_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_PHYS_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SERIAL_NUMBER_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_CONTROL_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SW_VERSION_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART3_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART2_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART1_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_ODOMETER_VALUE_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_VFPCAN_VERSION_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_HOST_CAN_VERSION_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_POSITION_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_COVERAGE_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_TIMESTAMPS_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_INFORMATION_DETECTIONS_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_TEMP_VOLT_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY2_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY1_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_CAN_VERSION_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_IS_EXTENDED (0)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_SYNC_TIMESTAMP_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DAQ_RESP_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_RESP_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_DTO_REQ_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_RESP_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_XCP_MRR_CTO_REQ_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_FUNC_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_RESP_PHYS_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_FORD_DIAG_REQ_PHYS_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SERIAL_NUMBER_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_CONTROL_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_SW_VERSION_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART3_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART2_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_LROS_VIN_PART1_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_LROS_ODOMETER_VALUE_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_VFPCAN_VERSION_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_HOST_CAN_VERSION_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_POSITION_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_SENSOR_COVERAGE_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_TIMESTAMPS_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_INFORMATION_DETECTIONS_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_TEMP_VOLT_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CYCLE_TIME_MS (25u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY2_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGN_FACTORY1_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CYCLE_TIME_MS (1000u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_CAN_VERSION_CYCLE_TIME_MS (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CYCLE_TIME_MS (30u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_F_RADAR_UNREASONABLE_NO__FLAG__CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_IFV_TRACKS_CHANGE_F_RADAR_UNREASONABLE_FLAG_SET_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_CAR_CFG_NOT_CONFIGURED_ERROR_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_CAR_CFG_NOT_CONFIGURED_ERROR_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_MODULE_NOT_CONFIGURED_ERROR_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_MODULE_NOT_CONFIGURED_ERROR_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_VIN_SIGNAL_COMPARE_FAILURE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_VIN_SIGNAL_COMPARE_FAILURE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_IPMA_PCAN_MISSING_MSG_NO__FAULT__CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_IPMA_PCAN_MISSING_MSG_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_IPMA_PCAN_DATA_RANGE_CHECK_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_2_IPMA_PCAN_DATA_RANGE_CHECK_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_APPLICATION_FLASH_CHECKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_APPLICATION_FLASH_CHECKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PROGRAM_CALIBRATION_FLASH_CHECKSUM_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PROGRAM_CALIBRATION_FLASH_CHECKSUM_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_KEEP_ALIVE_CHECKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_KEEP_ALIVE_CHECKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT3_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT3_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT4_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT4_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT5_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT5_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT6_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE0_BIT6_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_USC_VALIDATION_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_USC_VALIDATION_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_RAM_MEMORY_TEST_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_RAM_MEMORY_TEST_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT1_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT1_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PLL_LOCK_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PLL_LOCK_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_WATCHDOG_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_WATCHDOG_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_STACK_OVERFLOW_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_STACK_OVERFLOW_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_INSTRUCTION_SET_CHECK_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_INSTRUCTION_SET_CHECK_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT6_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT6_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT7_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE1_BIT7_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PCAN_BUS_OFF_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PCAN_BUS_OFF_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PCAN_MISSING_MSG_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_PCAN_MISSING_MSG_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT2_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT2_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT3_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT3_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT4_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT4_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT5_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT5_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT6_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE2_BIT6_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_ID_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_ID_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_5_SUPPLY_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_5_SUPPLY_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_3P3_RAW_SUPPLY_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_3P3_RAW_SUPPLY_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_3P3_DAC_SUPPLY_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_3P3_DAC_SUPPLY_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_THERMISTOR_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_THERMISTOR_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE3_BIT4_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE3_BIT4_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_1P25_SUPPLY_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_V_1P25_SUPPLY_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_BATTERY_HIGH_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_BATTERY_HIGH_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_BATTERY_LOW_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_BATTERY_LOW_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_FACTORY_ALIGNMENT_MODE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_FACTORY_ALIGNMENT_MODE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_HORIZONTAL_ALIGNMENT_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_HORIZONTAL_ALIGNMENT_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_VERTICAL_ALIGNMENT_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_VERTICAL_ALIGNMENT_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_MICROPROCESSOR_TEMP_HIGH_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_MICROPROCESSOR_TEMP_HIGH_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_UNREASONABLE_RADAR_DATA_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_UNREASONABLE_RADAR_DATA_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ALIGNMENT_ROUTINE_FAILED_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ALIGNMENT_ROUTINE_FAILED_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_TEMP_HIGH_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_TEMP_HIGH_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ECU_TEMP_HIGH_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ECU_TEMP_HIGH_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_MNR_BLOCKED_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_MNR_BLOCKED_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT1_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT1_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_SIDELOBE_BLOCKAGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_SIDELOBE_BLOCKAGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ANALOG_CONVERTER_DEVIC_SPI_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ANALOG_CONVERTER_DEVIC_SPI_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_FREQ_SYNTHESIZER_SPI_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_FREQ_SYNTHESIZER_SPI_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_XCVR_DEVICE_SPI_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_XCVR_DEVICE_SPI_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT6_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT6_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT7_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE5_BIT7_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE6_BIT0_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE6_BIT0_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_POWER_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TRANSMITTER_POWER_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_LOCAL_OSC_POWER_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_LOCAL_OSC_POWER_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_SATURATED_TUNING_FREQ_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_SATURATED_TUNING_FREQ_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TUNING_SENSITIVITY_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_TUNING_SENSITIVITY_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE6_BIT5_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE6_BIT5_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_DSP_OVERRUN_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_DSP_OVERRUN_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_LOOP_BW_OUT_OF_RANGE_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_LOOP_BW_OUT_OF_RANGE_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_AR_MTO_HOST_CHKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_AR_MTO_HOST_CHKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_HOST_TO_ARM_CHKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_HOST_TO_ARM_CHKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_DS_PTO_ARM_CHKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_DS_PTO_ARM_CHKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_AR_MTO_DSP_CHKSUM_FAULT_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_AR_MTO_DSP_CHKSUM_FAULT_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT4_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT4_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT5_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT5_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT6_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT6_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT7_NO__FAULT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_ACTIVE_FAULT_LATCHED_1_ACTIVE_FLT_LATCHED_BYTE7_BIT7_FAULT__PRESENT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_FRONT_LEFT_WHEEL_UNKNOWN_CHOICE (32766u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_FRONT_LEFT_WHEEL_FAULT_CHOICE (32767u)

#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_FRONT_RIGHT_WHEEL_UNKNOWN_CHOICE (32766u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_FRONT_RIGHT_WHEEL_FAULT_CHOICE (32767u)

#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_REAR_LEFT_WHEEL_UNKNOWN_CHOICE (32766u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_REAR_LEFT_WHEEL_FAULT_CHOICE (32767u)

#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_REAR_RIGHT_WHEEL_UNKNOWN_CHOICE (32766u)
#define MRR_PCAN_CORE_V07_02_WHEEL_SPEED_MSG_CAN_SPEED_REAR_RIGHT_WHEEL_FAULT_CHOICE (32767u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_CAN_VEH_LONG_ACCEL_QF_UNDEFINED__FAULTY__CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_CAN_VEH_LONG_ACCEL_QF_TEMPORARILY__UNDEFINED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_CAN_VEH_LONG_ACCEL_QF_INNACURATE_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_CAN_VEH_LONG_ACCEL_QF_ACCURATE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_YAW_RATE_REFERENCE_VALID_INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG3_YAW_RATE_REFERENCE_VALID_VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FSM_VEHICLE_VELOCITY_INVALID_CHOICE (65535u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FSM_YAW_RATE_VALID_INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FSM_YAW_RATE_VALID_VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FSM_VEHICLE_VELOCITY_VALID_INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_FSM_VEHICLE_VELOCITY_VALID_VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_CAN_STEERING_WHL_ANGLE_QF_INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG2_CAN_STEERING_WHL_ANGLE_QF_VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_TURN_SIGNAL_STATUS_NONE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_TURN_SIGNAL_STATUS_LEFT_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_TURN_SIGNAL_STATUS_RIGHT_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_TURN_SIGNAL_STATUS_LEFT_AND__RIGTH__BOTH_ON_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_VEHICLE_STATIONARY_NO_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_VEHICLE_STATIONARY_YES_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BRAKE_PEDAL_UNKNOWN_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BRAKE_PEDAL_NOT__PRESSED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BRAKE_PEDAL_PRESSED_CHOICE (2u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_NO_WIPING_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_INTERMITTENT__LOW_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_INTERMITTEND__HIGH_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_40_45_SWEEPS_PER_MIN_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_46_50_SWEEPS_PER_MIN_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_51_55_SWEEPS_PER_MIN_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_56_60_SWEEPS_PER_MIN_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_SPEED_INFO_WIPER_SYSTEM_ERROR_CHOICE (7u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_FRONT_CMD_WIPER__OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WIPER_FRONT_CMD_WIPER__ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WASHER_FRONT_CMD_WASHER_IS_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_WASHER_FRONT_CMD_WASHER_IS_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_FCW_SENSITIVITY_LEVEL_NOT__USED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_FCW_SENSITIVITY_LEVEL_LOW__SENSITIVITY_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_FCW_SENSITIVITY_LEVEL_MEDIUM__SENSITIVITY___NORMAL__CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_FCW_SENSITIVITY_LEVEL_HIGH__SENSITIVITY_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_MAIN_BEAM_INDICATION_HIGH_BEAM_IS_NOT_ACTIVATED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_MAIN_BEAM_INDICATION_HIGH_BEAM_IS_ACTIVATED_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_LEFT_FULL_SHAPE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_LEFT_L_SHAPE_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_LEFT_FLAT_SHAPE_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_LEFT_LOW_BEAM_SHAPE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_RIGHT_FULL_SHAPE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_RIGHT_L_SHAPE_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_RIGHT_FLAT_SHAPE_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_VEHICLE_STATE_MSG1_CAN_BEAM_SHAPE_ACTUAL_RIGHT_LOW_BEAM_SHAPE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_CONTROL_CAN_INST_MODE_INSTRUMENTATION_MODE_IS_SET_CHOICE (43605u)

#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_CAN_YAW_RATE_CALC_QF_UNDEFINED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_CAN_YAW_RATE_CALC_QF_TEMPORARILY__UNDEFINED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_CAN_YAW_RATE_CALC_QF_INNACCURATE_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_IFV_STATUS_COMPENSATED_CAN_YAW_RATE_CALC_QF_ACCURATE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_UNDEFINED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I3_NA_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I3_TC_OR_SC_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I4_NA_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I4_TC_OR_SC_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I5_NA_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_I5_TC_OR_SC_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_V6_NA_CHOICE (7u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_V6_TC_OR_SC_CHOICE (8u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_V8_NA_CHOICE (9u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_V8_TC_OR_SC_CHOICE (10u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_HEV_CHOICE (11u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_PHEV_CHOICE (12u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGENGINE_FORD_BEV_CHOICE (13u)

#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_UNDEFINED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_B479_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_B479_ST_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_B515_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_B562_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_MCA_SWB_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_S552_MCA_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_C519_CHOICE (7u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U553_SWB_CHOICE (8u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U553_LWB_CHOICE (9u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V408_SWB_CHOICE (10u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V362_MCA_SWB_CHOICE (11u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_LWB_CHOICE (12u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V408_LWB_CHOICE (13u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_CD539_MCA_CHOICE (14u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U540_MCA_CHOICE (15u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_CD391_E_MCA_CHOICE (16u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_C519_ST_CHOICE (17u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_MCA_LWB_CHOICE (18u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_SVT_SWB_CHOICE (19u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_SVT_LWB_CHOICE (20u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_MCA_SVT_SWB_CHOICE (21u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P552_MCA_SVT_LWB_CHOICE (22u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U554_SWB_CHOICE (23u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U554_LWB_CHOICE (24u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_B479_A_LINE_CHOICE (25u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_VBK_SWB_CHOICE (26u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_VBK_LWB_CHOICE (27u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_CHASSIS_SWB_CHOICE (28u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_CHASSIS_MWB1_CHOICE (29u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_CHASSIS_MWB2_CHOICE (30u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_V363_MCA_CHASSIS_LWB_CHOICE (31u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_C519_A_LINE_CHOICE (32u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P375_WAVE1_CHOICE (33u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U375_WAVE1_CHOICE (34u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P375_REDBACK_WAVE1_CHOICE (35u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_P375_WAVE2_CHOICE (36u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_D568_C_MCA_CHOICE (37u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_C482_CHOICE (38u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_C483_CHOICE (39u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U611_CHOICE (40u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_U625_CHOICE (41u)
#define MRR_PCAN_CORE_V07_02_LROS_CAR_CFG_FORD_CAN_LROS_CARCFGVEHTYPE_FORD_NOT_USED_CHOICE (42u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_CAN_FOUND_TARGET_TARGET_NOT_FOUND_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_CAN_FOUND_TARGET_TARGET_FOUND_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_CAN_BLOCKAGE_TD_NO_BLOCKAGE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_TD_BLOCKAGE_CAN_BLOCKAGE_TD_TD_BLOCKAGE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_LROS_ODOMETER_VALUE_CAN_ODOMETER_FORD_INVALID_CHOICE (16777215u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_VEH_BATT_VOLT_FAULT_CHOICE (255u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_PARK_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_REVERSE_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_NEUTRAL_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_DRIVE_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_SPORT_DRIVE_SPORT_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_LOW_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_FIRST_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_SECOND_CHOICE (7u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_THIRD_CHOICE (8u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_FOURTH_CHOICE (9u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_FIFTH_CHOICE (10u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_SIXTH_CHOICE (11u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_NOT_USED_1_CHOICE (12u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_NOT_USED_2_CHOICE (13u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_UNKNOWN_POSITION_CHOICE (14u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_GEAR_POSITION_FAULT_CHOICE (15u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_UNKNOWN_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_OFF_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_ACCESORY_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_RUN_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_START_CHOICE (8u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_IGN_STATUS_INVALID_CHOICE (15u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_DENIED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_STANDBY_DENIED_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_STANDBY_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_ACTIVE_QUE_ASSIST_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_ACTIVE_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_UNDEFINED_1_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_CRUISE_STATUS_FORD_UNDEFINED_2_CHOICE (7u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_MOTIVE_FORD_PW_PCK_OFF_TQ_NOT_AVAILABLE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_MOTIVE_FORD_PW_PCK_ON_TQ_NOT_AVAILABLE_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_MOTIVE_FORD_START_IN_PRGRSS_TQ_NOT_AVAIL_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_MOTIVE_FORD_PW_PCK_ON_TQ_AVAILABLE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_NOT_SUPPORTED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_SUPPORTED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_NOT_SUPPORTED_IMMINENT_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_LV_EVENT_IN_PROGRESS_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_FAULT_LIMITED_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_NOT_USED_1_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_NOT_USED_2_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_LROS_SIGNALS_ACTUAL_VALUES_CAN_POWER_SUPP_FORD_NOT_USED_3_CHOICE (7u)

#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_CAN_VEH_SPEED_FORD_UNKNOWN_CHOICE (65534u)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_CAN_VEH_SPEED_FORD_INVALID_CHOICE (65535u)

#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_CAN_VEH_YAW_FORD_NO_DATA_EXISTS_CHOICE (4094u)
#define MRR_PCAN_CORE_V07_02_LROS_FORD_SPECIFIC_CAN_VEH_YAW_FORD_FAULTY_CHOICE (4095u)

#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_AUTO_ALIGN_HANGLE_QF_UNDEFINED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_AUTO_ALIGN_HANGLE_QF_TEMPORARILY_UNDEFINED_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_AUTO_ALIGN_HANGLE_QF_INNACURATE_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_AUTO_ALIGN_HANGLE_QF_ACCURATE_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_AUTO_ALIGNMENT_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_SHORT_TRACK_ALIGNMENT_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_SERVICE_ALIGNMENT_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_STATIC_ALIGNMENT_1_TARGET_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_STATIC_ALIGNMENT_2_TARGET_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATE_STATIC_ALIGNMENT_FLAT_PLATE_CHOICE (6u)

#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_BUSY_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_SUCCESS_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__NO__TARGET_CHOICE (3u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__DEVIATION__TOO__LARGE_CHOICE (4u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__VARIANCE__TOO__LARGE_CHOICE (5u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__ONLY__LEFT__TARGET__FOUND_CHOICE (6u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__ONLY__RIGHT__TARGET__FOUND_CHOICE (7u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__TIME__OUT_CHOICE (8u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__HORIZONTAL__ALIGN__OUT_OF_RANGE_CHOICE (9u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__VERTICAL__ALIGN__OUT_OF_RANGE_CHOICE (10u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_FAIL__VER_AND__HOR__OUT_OF_RANGE_CHOICE (11u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_NO__PEAK___FLAT_PLATE_ONLY__CHOICE (12u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_LOW__AMPLITUDE___FLAT_PLATE_ONLY__CHOICE (13u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_UNDEFINED_1_CHOICE (14u)
#define MRR_PCAN_CORE_V07_02_MRR_HEADER_ALIGNMENT_STATE_CAN_ALIGNMENT_STATUS_UNDEFINED_2_CHOICE (15u)

#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_1_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_1_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_2_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_2_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_3_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_ALIGNMENT_CAN_FAC_ALIGN_CMD_3_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_SPEED_DIRECTION_FORWARD_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_SPEED_DIRECTION_REVERSE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_SPEED_VALIDITY_INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_SPEED_VALIDITY_VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_STAT_NO_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_VEHICLE_STAT_YES_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_YAW_RATE_VALIDITY_NO__VEHICLE__YAW__RATE_OR__INVALID_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_YAW_RATE_VALIDITY_VEH__YAW__RATE__AVAILABLE_OR__VALID_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_WIPER_STATUS_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_WIPER_STATUS_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_DAY_NIGHT_STATUS_DAY_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_STATUS_CAN_DAY_NIGHT_STATUS_NIGHT_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_CAN_SENSITIVITY_PROFILE_SELECT_PROFILE1_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_CAN_SENSITIVITY_PROFILE_SELECT_PROFILE2_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_CAN_SENSITIVITY_PROFILE_SELECT_PROFILE3_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_FR_CAN_SENSITIVITY_PROFILE_SELECT_PROFILE4_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_CAN_DET_CONFID_AZIMUTH_04_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_CAN_DET_CONFID_AZIMUTH_04_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_CAN_DET_CONFID_AZIMUTH_04_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_004_CAN_DET_CONFID_AZIMUTH_04_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_ALIGN_ENABLE_AUTO_ALIGNMENT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_ALIGN_ENABLE_SERVICE_ALIGNMENT_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_ALIGN_ENABLE_FACTORY_ALIGNMENT_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_ALIGN_ENABLE_UNUSED_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_SERV_ALIGN_TYPE_AUTO_OR__DEALER_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT2_CAN_SERV_ALIGN_TYPE_SHORT__TRACK_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_BLOCKAGE_DISABLE_ENABLED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_BLOCKAGE_DISABLE_DISABLED_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_USE_ANGLE_MISALIGNMENT_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_USE_ANGLE_MISALIGNMENT_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_MRR_UPSIDE_DOWN_RIGHT_SIDE_UP_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_SYSTEM_ALIGNMENT1_CAN_MRR_UPSIDE_DOWN_UPSIDE_DOWN_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_CAN_RADIATION_CTRL_OFF_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_CONTROL_MSG_NR_CAN_RADIATION_CTRL_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_CAN_DET_CONFID_AZIMUTH_64_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_CAN_DET_CONFID_AZIMUTH_64_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_CAN_DET_CONFID_AZIMUTH_64_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_064_CAN_DET_CONFID_AZIMUTH_64_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_CAN_DET_CONFID_AZIMUTH_63_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_CAN_DET_CONFID_AZIMUTH_63_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_CAN_DET_CONFID_AZIMUTH_63_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_063_CAN_DET_CONFID_AZIMUTH_63_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_CAN_DET_CONFID_AZIMUTH_62_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_CAN_DET_CONFID_AZIMUTH_62_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_CAN_DET_CONFID_AZIMUTH_62_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_062_CAN_DET_CONFID_AZIMUTH_62_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_CAN_DET_CONFID_AZIMUTH_61_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_CAN_DET_CONFID_AZIMUTH_61_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_CAN_DET_CONFID_AZIMUTH_61_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_061_CAN_DET_CONFID_AZIMUTH_61_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_CAN_DET_CONFID_AZIMUTH_60_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_CAN_DET_CONFID_AZIMUTH_60_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_CAN_DET_CONFID_AZIMUTH_60_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_060_CAN_DET_CONFID_AZIMUTH_60_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_CAN_DET_CONFID_AZIMUTH_59_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_CAN_DET_CONFID_AZIMUTH_59_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_CAN_DET_CONFID_AZIMUTH_59_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_059_CAN_DET_CONFID_AZIMUTH_59_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_CAN_DET_CONFID_AZIMUTH_58_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_CAN_DET_CONFID_AZIMUTH_58_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_CAN_DET_CONFID_AZIMUTH_58_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_058_CAN_DET_CONFID_AZIMUTH_58_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_CAN_DET_CONFID_AZIMUTH_57_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_CAN_DET_CONFID_AZIMUTH_57_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_CAN_DET_CONFID_AZIMUTH_57_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_057_CAN_DET_CONFID_AZIMUTH_57_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_CAN_DET_CONFID_AZIMUTH_56_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_CAN_DET_CONFID_AZIMUTH_56_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_CAN_DET_CONFID_AZIMUTH_56_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_056_CAN_DET_CONFID_AZIMUTH_56_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_CAN_DET_CONFID_AZIMUTH_55_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_CAN_DET_CONFID_AZIMUTH_55_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_CAN_DET_CONFID_AZIMUTH_55_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_055_CAN_DET_CONFID_AZIMUTH_55_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_CAN_DET_CONFID_AZIMUTH_48_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_CAN_DET_CONFID_AZIMUTH_48_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_CAN_DET_CONFID_AZIMUTH_48_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_048_CAN_DET_CONFID_AZIMUTH_48_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_CAN_DET_CONFID_AZIMUTH_47_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_CAN_DET_CONFID_AZIMUTH_47_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_CAN_DET_CONFID_AZIMUTH_47_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_047_CAN_DET_CONFID_AZIMUTH_47_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_CAN_DET_CONFID_AZIMUTH_46_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_CAN_DET_CONFID_AZIMUTH_46_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_CAN_DET_CONFID_AZIMUTH_46_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_046_CAN_DET_CONFID_AZIMUTH_46_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_CAN_DET_CONFID_AZIMUTH_45_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_CAN_DET_CONFID_AZIMUTH_45_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_CAN_DET_CONFID_AZIMUTH_45_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_045_CAN_DET_CONFID_AZIMUTH_45_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_CAN_DET_CONFID_AZIMUTH_44_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_CAN_DET_CONFID_AZIMUTH_44_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_CAN_DET_CONFID_AZIMUTH_44_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_044_CAN_DET_CONFID_AZIMUTH_44_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_CAN_DET_CONFID_AZIMUTH_43_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_CAN_DET_CONFID_AZIMUTH_43_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_CAN_DET_CONFID_AZIMUTH_43_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_043_CAN_DET_CONFID_AZIMUTH_43_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_CAN_DET_CONFID_AZIMUTH_42_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_CAN_DET_CONFID_AZIMUTH_42_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_CAN_DET_CONFID_AZIMUTH_42_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_042_CAN_DET_CONFID_AZIMUTH_42_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_CAN_DET_CONFID_AZIMUTH_41_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_CAN_DET_CONFID_AZIMUTH_41_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_CAN_DET_CONFID_AZIMUTH_41_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_041_CAN_DET_CONFID_AZIMUTH_41_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_CAN_DET_CONFID_AZIMUTH_40_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_CAN_DET_CONFID_AZIMUTH_40_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_CAN_DET_CONFID_AZIMUTH_40_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_040_CAN_DET_CONFID_AZIMUTH_40_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_CAN_DET_CONFID_AZIMUTH_38_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_CAN_DET_CONFID_AZIMUTH_38_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_CAN_DET_CONFID_AZIMUTH_38_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_038_CAN_DET_CONFID_AZIMUTH_38_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_CAN_DET_CONFID_AZIMUTH_37_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_CAN_DET_CONFID_AZIMUTH_37_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_CAN_DET_CONFID_AZIMUTH_37_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_037_CAN_DET_CONFID_AZIMUTH_37_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_CAN_DET_CONFID_AZIMUTH_36_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_CAN_DET_CONFID_AZIMUTH_36_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_CAN_DET_CONFID_AZIMUTH_36_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_036_CAN_DET_CONFID_AZIMUTH_36_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_CAN_DET_CONFID_AZIMUTH_35_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_CAN_DET_CONFID_AZIMUTH_35_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_CAN_DET_CONFID_AZIMUTH_35_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_035_CAN_DET_CONFID_AZIMUTH_35_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_CAN_DET_CONFID_AZIMUTH_34_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_CAN_DET_CONFID_AZIMUTH_34_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_CAN_DET_CONFID_AZIMUTH_34_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_034_CAN_DET_CONFID_AZIMUTH_34_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_CAN_DET_CONFID_AZIMUTH_33_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_CAN_DET_CONFID_AZIMUTH_33_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_CAN_DET_CONFID_AZIMUTH_33_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_033_CAN_DET_CONFID_AZIMUTH_33_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_CAN_DET_CONFID_AZIMUTH_32_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_CAN_DET_CONFID_AZIMUTH_32_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_CAN_DET_CONFID_AZIMUTH_32_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_032_CAN_DET_CONFID_AZIMUTH_32_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_CAN_DET_CONFID_AZIMUTH_31_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_CAN_DET_CONFID_AZIMUTH_31_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_CAN_DET_CONFID_AZIMUTH_31_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_031_CAN_DET_CONFID_AZIMUTH_31_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_CAN_DET_CONFID_AZIMUTH_30_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_CAN_DET_CONFID_AZIMUTH_30_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_CAN_DET_CONFID_AZIMUTH_30_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_030_CAN_DET_CONFID_AZIMUTH_30_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_CAN_DET_CONFID_AZIMUTH_29_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_CAN_DET_CONFID_AZIMUTH_29_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_CAN_DET_CONFID_AZIMUTH_29_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_029_CAN_DET_CONFID_AZIMUTH_29_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_CAN_DET_CONFID_AZIMUTH_27_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_CAN_DET_CONFID_AZIMUTH_27_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_CAN_DET_CONFID_AZIMUTH_27_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_027_CAN_DET_CONFID_AZIMUTH_27_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_CAN_DET_CONFID_AZIMUTH_26_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_CAN_DET_CONFID_AZIMUTH_26_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_CAN_DET_CONFID_AZIMUTH_26_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_026_CAN_DET_CONFID_AZIMUTH_26_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_CAN_DET_CONFID_AZIMUTH_25_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_CAN_DET_CONFID_AZIMUTH_25_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_CAN_DET_CONFID_AZIMUTH_25_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_025_CAN_DET_CONFID_AZIMUTH_25_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_CAN_DET_CONFID_AZIMUTH_24_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_CAN_DET_CONFID_AZIMUTH_24_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_CAN_DET_CONFID_AZIMUTH_24_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_024_CAN_DET_CONFID_AZIMUTH_24_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_CAN_DET_CONFID_AZIMUTH_23_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_CAN_DET_CONFID_AZIMUTH_23_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_CAN_DET_CONFID_AZIMUTH_23_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_023_CAN_DET_CONFID_AZIMUTH_23_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_CAN_DET_CONFID_AZIMUTH_22_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_CAN_DET_CONFID_AZIMUTH_22_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_CAN_DET_CONFID_AZIMUTH_22_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_022_CAN_DET_CONFID_AZIMUTH_22_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_CAN_DET_CONFID_AZIMUTH_21_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_CAN_DET_CONFID_AZIMUTH_21_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_CAN_DET_CONFID_AZIMUTH_21_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_021_CAN_DET_CONFID_AZIMUTH_21_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_CAN_DET_CONFID_AZIMUTH_20_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_CAN_DET_CONFID_AZIMUTH_20_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_CAN_DET_CONFID_AZIMUTH_20_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_020_CAN_DET_CONFID_AZIMUTH_20_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_CAN_DET_CONFID_AZIMUTH_19_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_CAN_DET_CONFID_AZIMUTH_19_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_CAN_DET_CONFID_AZIMUTH_19_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_019_CAN_DET_CONFID_AZIMUTH_19_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_CAN_DET_CONFID_AZIMUTH_18_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_CAN_DET_CONFID_AZIMUTH_18_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_CAN_DET_CONFID_AZIMUTH_18_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_018_CAN_DET_CONFID_AZIMUTH_18_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_CAN_DET_CONFID_AZIMUTH_54_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_CAN_DET_CONFID_AZIMUTH_54_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_CAN_DET_CONFID_AZIMUTH_54_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_054_CAN_DET_CONFID_AZIMUTH_54_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_CAN_DET_CONFID_AZIMUTH_53_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_CAN_DET_CONFID_AZIMUTH_53_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_CAN_DET_CONFID_AZIMUTH_53_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_053_CAN_DET_CONFID_AZIMUTH_53_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_CAN_DET_CONFID_AZIMUTH_52_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_CAN_DET_CONFID_AZIMUTH_52_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_CAN_DET_CONFID_AZIMUTH_52_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_052_CAN_DET_CONFID_AZIMUTH_52_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_CAN_DET_CONFID_AZIMUTH_51_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_CAN_DET_CONFID_AZIMUTH_51_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_CAN_DET_CONFID_AZIMUTH_51_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_051_CAN_DET_CONFID_AZIMUTH_51_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_CAN_DET_CONFID_AZIMUTH_50_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_CAN_DET_CONFID_AZIMUTH_50_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_CAN_DET_CONFID_AZIMUTH_50_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_050_CAN_DET_CONFID_AZIMUTH_50_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_CAN_DET_CONFID_AZIMUTH_49_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_CAN_DET_CONFID_AZIMUTH_49_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_CAN_DET_CONFID_AZIMUTH_49_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_049_CAN_DET_CONFID_AZIMUTH_49_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_CAN_DET_CONFID_AZIMUTH_39_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_CAN_DET_CONFID_AZIMUTH_39_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_CAN_DET_CONFID_AZIMUTH_39_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_039_CAN_DET_CONFID_AZIMUTH_39_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_CAN_DET_CONFID_AZIMUTH_28_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_CAN_DET_CONFID_AZIMUTH_28_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_CAN_DET_CONFID_AZIMUTH_28_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_028_CAN_DET_CONFID_AZIMUTH_28_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_CAN_DET_CONFID_AZIMUTH_17_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_CAN_DET_CONFID_AZIMUTH_17_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_CAN_DET_CONFID_AZIMUTH_17_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_017_CAN_DET_CONFID_AZIMUTH_17_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_CAN_DET_CONFID_AZIMUTH_16_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_CAN_DET_CONFID_AZIMUTH_16_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_CAN_DET_CONFID_AZIMUTH_16_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_016_CAN_DET_CONFID_AZIMUTH_16_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_CAN_DET_CONFID_AZIMUTH_15_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_CAN_DET_CONFID_AZIMUTH_15_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_CAN_DET_CONFID_AZIMUTH_15_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_015_CAN_DET_CONFID_AZIMUTH_15_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_CAN_DET_CONFID_AZIMUTH_14_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_CAN_DET_CONFID_AZIMUTH_14_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_CAN_DET_CONFID_AZIMUTH_14_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_014_CAN_DET_CONFID_AZIMUTH_14_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_CAN_DET_CONFID_AZIMUTH_13_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_CAN_DET_CONFID_AZIMUTH_13_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_CAN_DET_CONFID_AZIMUTH_13_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_013_CAN_DET_CONFID_AZIMUTH_13_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_CAN_DET_CONFID_AZIMUTH_12_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_CAN_DET_CONFID_AZIMUTH_12_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_CAN_DET_CONFID_AZIMUTH_12_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_012_CAN_DET_CONFID_AZIMUTH_12_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_CAN_DET_CONFID_AZIMUTH_11_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_CAN_DET_CONFID_AZIMUTH_11_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_CAN_DET_CONFID_AZIMUTH_11_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_011_CAN_DET_CONFID_AZIMUTH_11_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_CAN_DET_CONFID_AZIMUTH_10_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_CAN_DET_CONFID_AZIMUTH_10_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_CAN_DET_CONFID_AZIMUTH_10_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_010_CAN_DET_CONFID_AZIMUTH_10_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_CAN_DET_CONFID_AZIMUTH_09_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_CAN_DET_CONFID_AZIMUTH_09_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_CAN_DET_CONFID_AZIMUTH_09_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_009_CAN_DET_CONFID_AZIMUTH_09_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_CAN_DET_CONFID_AZIMUTH_08_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_CAN_DET_CONFID_AZIMUTH_08_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_CAN_DET_CONFID_AZIMUTH_08_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_008_CAN_DET_CONFID_AZIMUTH_08_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_CAN_DET_CONFID_AZIMUTH_07_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_CAN_DET_CONFID_AZIMUTH_07_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_CAN_DET_CONFID_AZIMUTH_07_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_007_CAN_DET_CONFID_AZIMUTH_07_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_CAN_DET_CONFID_AZIMUTH_06_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_CAN_DET_CONFID_AZIMUTH_06_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_CAN_DET_CONFID_AZIMUTH_06_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_006_CAN_DET_CONFID_AZIMUTH_06_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_CAN_DET_CONFID_AZIMUTH_05_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_CAN_DET_CONFID_AZIMUTH_05_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_CAN_DET_CONFID_AZIMUTH_05_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_005_CAN_DET_CONFID_AZIMUTH_05_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_CAN_DET_CONFID_AZIMUTH_03_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_CAN_DET_CONFID_AZIMUTH_03_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_CAN_DET_CONFID_AZIMUTH_03_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_003_CAN_DET_CONFID_AZIMUTH_03_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_CAN_DET_CONFID_AZIMUTH_02_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_CAN_DET_CONFID_AZIMUTH_02_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_CAN_DET_CONFID_AZIMUTH_02_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_002_CAN_DET_CONFID_AZIMUTH_02_LOW_CHOICE (3u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_XCVR_OPERATIONAL_OFF__CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_XCVR_OPERATIONAL_ON_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_NOT_OP_RADAR_OPERATIONAL_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_NOT_OP_RADAR_NOT_OPERATIONAL_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_BLOCKAGE_MNR_NO__RADAR__BLOCKAGE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_BLOCKAGE_MNR_RADAR__BLOCKAGE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_BLOCKAGE_SIDELOBE_NO__RADAR__BLOCKAGE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_BLOCKAGE_SIDELOBE_RADAR__BLOCKAGE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_OVERHEAT_ERROR_NO__OVERHEAT_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_OVERHEAT_ERROR_RADAR_OVERHEAT_CONDITION_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_OUT_RANGE_RADAR_WITHIN_RANGE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_OUT_RANGE_RADAR_OUT_OF_RANGE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_EXT_COND_NOK_EXTERNAL_CONDITIONS_OK_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_EXT_COND_NOK_TOO_HIGH_TEMP_OR_INSUFFICIENT_PW_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_NOT_START_RADAR_ALIGN_STARTED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_NOT_START_RADAR_ALIGN_NOT_STARTED_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_INTERFERENCE_TYPE_NO__INTERFERENCE_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_INTERFERENCE_TYPE_SLOW_FMCW_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_INTERFERENCE_TYPE_STAR_PD__LIKE_CHOICE (2u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RECOMMEND_UNCONVERGE_NOT__RECOMMENDED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RECOMMEND_UNCONVERGE_RECOMMENDED_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_INCOMPLETE_ALIGNMENT__COMPLETED_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_STATUS_RADAR_CAN_RADAR_ALIGN_INCOMPLETE_ALIGNMENT__INCOMPLETE_CHOICE (1u)

#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_CAN_DET_CONFID_AZIMUTH_01_HIGH_CHOICE (0u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_CAN_DET_CONFID_AZIMUTH_01_MEDIUM_HIGH_CHOICE (1u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_CAN_DET_CONFID_AZIMUTH_01_MEDIUM_LOW_CHOICE (2u)
#define MRR_PCAN_CORE_V07_02_MRR_DETECTION_001_CAN_DET_CONFID_AZIMUTH_01_LOW_CHOICE (3u)

/**
 * Signals in message IFV_TracksChange.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ifv_tracks_change_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_radar_unreasonable;
};

/**
 * Signals in message Active_Fault_Latched_2.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_active_fault_latched_2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t car_cfg_not_configured_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t module_not_configured_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vin_signal_compare_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipma_pcan_missing_msg;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipma_pcan_data_range_check;
};

/**
 * Signals in message Active_Fault_Latched_1.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_active_fault_latched_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t application_flash_checksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t program_calibration_flash_checksum;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t keep_alive_checksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte0_bit3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte0_bit4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte0_bit5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte0_bit6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t usc_validation_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ram_memory_test_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte1_bit1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pll_lock_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t watchdog_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stack_overflow_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t instruction_set_check_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte1_bit6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte1_bit7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcan_bus_off;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcan_missing_msg_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte2_bit2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte2_bit3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte2_bit4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte2_bit5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte2_bit6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmitter_id_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_5_supply_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_3p3_raw_supply_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_3p3_dac_supply_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermistor_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte3_bit4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_1p25_supply_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_low_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t factory_alignment_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t horizontal_alignment_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vertical_alignment_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t microprocessor_temp_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t unreasonable_radar_data;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alignment_routine_failed_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmitter_temp_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecu_temp_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mnr_blocked;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte5_bit1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sidelobe_blockage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t analog_converter_devic_spi_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t freq_synthesizer_spi_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t xcvr_device_spi_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte5_bit6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte5_bit7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte6_bit0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmitter_power_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t local_osc_power_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t saturated_tuning_freq_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tuning_sensitivity_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte6_bit5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsp_overrun_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t loop_bw_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ar_mto_host_chksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t host_to_arm_chksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ds_pto_arm_chksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ar_mto_dsp_chksum_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte7_bit4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte7_bit5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte7_bit6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_flt_latched_byte7_bit7;
};

/**
 * Signals in message Sync_Timestamp.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_sync_timestamp_t {
    /**
     * Range: 0..18446744073709600000 (0..1.84467440737096E+19 us)
     * Scale: 1
     * Offset: 0
     */
    uint64_t can_vfp_timestamp;
};

/**
 * Signals in message XCP_MRR_DAQ_RESP.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_xcp_mrr_daq_resp_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_daq_resp_byte7;
};

/**
 * Signals in message XCP_MRR_DTO_RESP.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_xcp_mrr_dto_resp_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_resp_byte7;
};

/**
 * Signals in message XCP_MRR_DTO_REQ.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_xcp_mrr_dto_req_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_dto_cmd_byte7;
};

/**
 * Signals in message XCP_MRR_CTO_RESP.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_xcp_mrr_cto_resp_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_resp_byte7;
};

/**
 * Signals in message XCP_MRR_CTO_REQ.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_xcp_mrr_cto_req_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mrr_xcp_cto_cmd_byte7;
};

/**
 * Signals in message Ford_Diag_Req_Func.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ford_diag_req_func_t {
    /**
     * Range: 0..18446700000000000000 (0..1.84467E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tester_functional_req;
};

/**
 * Signals in message Ford_Diag_Resp_Phys.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ford_diag_resp_phys_t {
    /**
     * Range: 0..18446700000000000000 (0..1.84467E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tester_physical_res_ccm;
};

/**
 * Signals in message Ford_Diag_Req_Phys.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ford_diag_req_phys_t {
    /**
     * Range: 0..18446700000000000000 (0..1.84467E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tester_physical_req_ccm;
};

/**
 * Signals in message Wheel_Speed_Msg.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_wheel_speed_msg_t {
    /**
     * Range: 0..32767 (0..327.67 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_speed_front_left_wheel;

    /**
     * Range: 0..32767 (0..327.67 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_speed_front_right_wheel;

    /**
     * Range: 0..32767 (0..327.67 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_speed_rear_left_wheel;

    /**
     * Range: 0..32767 (0..327.67 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_speed_rear_right_wheel;
};

/**
 * Signals in message VEHICLE_STATE_MSG3.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_vehicle_state_msg3_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_veh_long_accel_qf;

    /**
     * Range: 0..8189 (-40..41.89 m/s^2)
     * Scale: 0.01
     * Offset: -40
     */
    uint16_t can_veh_long_accel;

    /**
     * Range: -2047.502047502047502047502048..2047.502047502047502047502048 (-75..75 deg/s)
     * Scale: 0.03663
     * Offset: 0
     */
    int16_t yaw_rate_reference;

    /**
     * Range: 0..1 (0..1 boolean)
     * Scale: 1
     * Offset: 0
     */
    uint8_t yaw_rate_reference_valid;
};

/**
 * Signals in message VEHICLE_STATE_MSG2.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_vehicle_state_msg2_t {
    /**
     * Range: 0..65534 (0..511.984375 m/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t fsm_vehicle_velocity;

    /**
     * Range: -9600..9600 (-75..75 deg/s)
     * Scale: 0.0078125
     * Offset: 0
     */
    int16_t fsm_yaw_rate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fsm_yaw_rate_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fsm_vehicle_velocity_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_steering_whl_angle_qf;

    /**
     * Range: 0..16383 (0..16383 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_vehicle_index_4_fa;

    /**
     * Range: 0..32767 (-1600..1676.7 deg)
     * Scale: 0.1
     * Offset: -1600
     */
    uint16_t can_steering_whl_angle;
};

/**
 * Signals in message VEHICLE_STATE_MSG1.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_vehicle_state_msg1_t {
    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_intf_major_version;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_intf_minor_version;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_turn_signal_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_vehicle_stationary;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_high_wheel_slip;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_brake_pedal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_reverse_gear;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_wiper_speed_info;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_wiper_front_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_washer_front_cmd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fcw_sensitivity_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_main_beam_indication;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_beam_shape_actual_left;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_beam_shape_actual_right;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_vehicle_index;
};

/**
 * Signals in message MRR_Status_SerialNumber.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_status_serial_number_t {
    /**
     * Range: 0..1099511627800 (0..1099511627800 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t can_serial_number;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_sequence_number;
};

/**
 * Signals in message System_Control.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_control_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_inst_mode;
};

/**
 * Signals in message MRR_Status_SwVersion.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_status_sw_version_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sw_release_revision;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sw_promote_revision;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sw_field_revision;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pbl_release_revision;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pbl_promote_revision;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pbl_field_revision;
};

/**
 * Signals in message IFV_Status_Compensated.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ifv_status_compensated_t {
    /**
     * Range: 0..6400 (-100..100 deg/s)
     * Scale: 0.03125
     * Offset: -100
     */
    uint16_t can_yaw_rate_calc;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_yaw_rate_calc_qf;

    /**
     * Range: 0..1023 (-16..15.96875 deg/s)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t can_yaw_rate_bias;

    /**
     * Range: 0..65535.0000000008192 (0.9..1.09999694824219 -)
     * Scale: 3.0517578125e-06
     * Offset: 0.9
     */
    uint16_t can_veh_spd_comp_factor;

    /**
     * Range: 0..10000 (0..100 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_vehicle_speed_calc;
};

/**
 * Signals in message LROS_CarCfg_Ford.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_car_cfg_ford_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_lros_carcfgengine_ford;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_lros_carcfgvehtype_ford;

    /**
     * Range: -128..127 (-8..7.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int8_t can_fa_vert_upper_limit;

    /**
     * Range: -128..127 (-8..7.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int8_t can_fa_vert_lower_limit;

    /**
     * Range: -128..127 (-8..7.9375 -)
     * Scale: 0.0625
     * Offset: 0
     */
    int8_t can_fa_vert_ground_offset;

    /**
     * Range: -2..1 (-2..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t k_radar_azimuth_polarity;
};

/**
 * Signals in message System_TDBlockage.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_td_blockage_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_found_target;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_td;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_td_scan_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_number_of_tracks_mov;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_number_of_tracks_stat;
};

/**
 * Signals in message LROS_VIN_part3.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_vin_part3_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vin_part3;
};

/**
 * Signals in message LROS_VIN_part2.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_vin_part2_t {
    /**
     * Range: 0..18446700000000000000 (0..1.84467E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vin_part2;
};

/**
 * Signals in message LROS_VIN_part1.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_vin_part1_t {
    /**
     * Range: 0..18446700000000000000 (0..1.84467E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vin_part1;
};

/**
 * Signals in message LROS_OdometerValue.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_odometer_value_t {
    /**
     * Range: 0..16777214 (0..16777214 km)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_odometer_ford;
};

/**
 * Signals in message LROS_SignalsActualValues.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_signals_actual_values_t {
    /**
     * Range: 0..254 (0..15.875 V)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t can_veh_batt_volt;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_gear_position;

    /**
     * Range: 0..1023 (-128..127.75 C)
     * Scale: 0.25
     * Offset: -128
     */
    uint16_t can_ambient_temp;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_ign_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_cruise_status_ford;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_power_motive_ford;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_power_supp_ford;
};

/**
 * Signals in message LROS_Ford_Specific.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_lros_ford_specific_t {
    /**
     * Range: 0..4294967295 (0..429496729.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t can_globalrealtime_ford;

    /**
     * Range: 0..65533 (0..655.33 kph)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_veh_speed_ford;

    /**
     * Range: 0..65533 (-6.5..6.6066 rad/s)
     * Scale: 0.0002
     * Offset: -6.5
     */
    uint16_t can_veh_yaw_ford;
};

/**
 * Signals in message IFV_Status_VFPCANVersion.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ifv_status_vfpcan_version_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_major_ifv_vfp;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_minor_ifv_vfp;
};

/**
 * Signals in message IFV_Status_HostCANVersion.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_ifv_status_host_can_version_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_major_ifv_host;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_minor_ifv_host;
};

/**
 * Signals in message MRR_Header_SensorPosition.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_header_sensor_position_t {
    /**
     * Range: 0..255 (-8..7.9375 deg)
     * Scale: 0.0625
     * Offset: -8
     */
    uint8_t can_sensor_hangle_offset;

    /**
     * Range: 0..65535 (0..655.35 cm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_sensor_long_offset;

    /**
     * Range: 0..65535 (0..655.35 cm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t can_sensor_lat_offset;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sensor_polarity;
};

/**
 * Signals in message MRR_Header_SensorCoverage.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_header_sensor_coverage_t {
    /**
     * Range: 0..255 (0..255 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_range_coverage;

    /**
     * Range: 0..255 (-128..127 m/s)
     * Scale: 1
     * Offset: -128
     */
    uint8_t can_doppler_coverage;

    /**
     * Range: 0..255 (0..255 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sensor_fov_hor;
};

/**
 * Signals in message MRR_Header_AlignmentState.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_header_alignment_state_t {
    /**
     * Range: 0..1023 (-0.1745329..0.1745329094 rad)
     * Scale: 0.0003412178
     * Offset: -0.1745329
     */
    uint16_t can_auto_align_hangle;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_auto_align_hangle_qf;

    /**
     * Range: 0..1023 (-0.1745329..0.1745329094 rad)
     * Scale: 0.0003412178
     * Offset: -0.1745329
     */
    uint16_t can_auto_align_hangle_ref;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_alignment_state;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_alignment_status;
};

/**
 * Signals in message MRR_Header_Timestamps.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_header_timestamps_t {
    /**
     * Range: 0..4294967295 (0..429496729.5 ms)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t can_sensor_time_stamp;

    /**
     * Range: 0..2047 (0..204.7 ms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t can_det_time_since_meas;
};

/**
 * Signals in message MRR_Header_InformationDetections.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_header_information_detections_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_look_index;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_look_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_scan_index;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_number_of_det;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_align_updates_done;
};

/**
 * Signals in message MRR_Control_Alignment.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_control_alignment_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_align_cmd_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_align_cmd_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_align_cmd_3;
};

/**
 * Signals in message MRR_Status_Temp_Volt.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_status_temp_volt_t {
    /**
     * Range: 0..255 (-50..205 C)
     * Scale: 1
     * Offset: -50
     */
    uint8_t can_processor_temp1;

    /**
     * Range: 0..255 (0..20.4 V)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t can_3_3_v_dac;

    /**
     * Range: 0..255 (-50..205 C)
     * Scale: 1
     * Offset: -50
     */
    uint8_t can_processor_thermistor;

    /**
     * Range: 0..255 (0..20.4 V)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t can_3_3_v_raw;

    /**
     * Range: 0..255 (-50..205 C)
     * Scale: 1
     * Offset: -50
     */
    uint8_t can_mmic_temp1;

    /**
     * Range: 0..255 (0..20.4 V)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t can_5_v;

    /**
     * Range: 0..255 (0..20.4 V)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t can_1_25_v;

    /**
     * Range: 0..255 (0..20.4 V)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t can_batt_volts;
};

/**
 * Signals in message System_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_status_t {
    /**
     * Range: 0..2047 (0..127.9375 m/s)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t can_vehicle_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_vehicle_speed_direction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_vehicle_speed_validity;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_vehicle_stat;

    /**
     * Range: 0..4095 (-128..127.9375 deg/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t can_yaw_rate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_yaw_rate_validity;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_wiper_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_day_night_status;
};

/**
 * Signals in message MRR_Control_Msg_FR.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_control_msg_fr_t {
    /**
     * Range: 0..255 (50..2600 MHz)
     * Scale: 10
     * Offset: 50
     */
    uint8_t can_desired_sweep_bw_frll;

    /**
     * Range: 0..1023 (76000..81115 MHz)
     * Scale: 5
     * Offset: 76000
     */
    uint16_t can_stop_frequency_frll;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sensitivity_profile_select;

    /**
     * Range: 0..511 (0..51.1 us)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t can_prp_factor_frll;

    /**
     * Range: 0..255 (50..2600 MHz)
     * Scale: 10
     * Offset: 50
     */
    uint8_t can_desired_sweep_bw_frml;

    /**
     * Range: 0..1023 (76000..81115 MHz)
     * Scale: 5
     * Offset: 76000
     */
    uint16_t can_stop_frequency_frml;

    /**
     * Range: 0..511 (0..51.1 us)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t can_prp_factor_frml;
};

/**
 * Signals in message MRR_Detection_004.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_004_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_04;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_04;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_04;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_04;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_04;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_04;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_04;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_04;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_04;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_04;
};

/**
 * Signals in message System_AlignFactory2.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_align_factory2_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_align_max_nt;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_plate_positions_total;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_plate_tilt_number;

    /**
     * Range: 0..63 (-8..7.75 deg)
     * Scale: 0.25
     * Offset: -8
     */
    uint8_t can_fac_plate_tilt_angle;

    /**
     * Range: 0..255 (-2..1.984375 -)
     * Scale: 0.015625
     * Offset: -2
     */
    uint8_t can_lateral_mounting_offset;
};

/**
 * Signals in message System_AlignFactory1.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_align_factory1_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fac_align_samp_req;

    /**
     * Range: 0..255 (-128..127 cm)
     * Scale: 1
     * Offset: -128
     */
    uint8_t can_fac_tgt_mtg_offset;

    /**
     * Range: 0..255 (-128..127 cm)
     * Scale: 1
     * Offset: -128
     */
    uint8_t can_fac_tgt_mtg_space_hor;

    /**
     * Range: 0..255 (0..15.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t can_fac_tgt_range_1;

    /**
     * Range: 0..255 (0..15.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t can_fac_tgt_range_m2_t;

    /**
     * Range: 0..255 (0..15.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t can_fac_tgt_range_r2_m;
};

/**
 * Signals in message System_Alignment2.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_alignment2_t {
    /**
     * Range: 0..7 (250..2000 -)
     * Scale: 250
     * Offset: 250
     */
    uint8_t can_aalign_avg_ctr_total;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_align_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_serv_align_type;

    /**
     * Range: 0..255 (-8..7.9375 deg)
     * Scale: 0.0625
     * Offset: -8
     */
    uint8_t can_angle_mounting_hoffset;

    /**
     * Range: 0..31 (0..31 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_fov_lr;

    /**
     * Range: 0..127 (0..127 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_fov_mr;

    /**
     * Range: 0..127 (0..127 cm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_height;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_serv_align_updates_need;
};

/**
 * Signals in message System_Alignment1.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_system_alignment1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_disable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_use_angle_misalignment;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_mrr_upside_down;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_scan_index_ack;

    /**
     * Range: 0..1023 (-10..21.96875 deg)
     * Scale: 0.03125
     * Offset: -10
     */
    uint16_t can_angle_misalignment_hor;

    /**
     * Range: 0..15 (0..15 dB)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_filter_output;
};

/**
 * Signals in message MRR_Control_Msg_NR.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_control_msg_nr_t {
    /**
     * Range: 0..255 (50..2600 MHz)
     * Scale: 10
     * Offset: 50
     */
    uint8_t can_desired_sweep_bw_nrll;

    /**
     * Range: 0..1023 (76000..81115 MHz)
     * Scale: 5
     * Offset: 76000
     */
    uint16_t can_stop_frequency_nrml;

    /**
     * Range: 0..511 (0..51.1 us)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t can_prp_factor_nrll;

    /**
     * Range: 0..255 (50..2600 MHz)
     * Scale: 10
     * Offset: 50
     */
    uint8_t can_desired_sweep_bw_nrml;

    /**
     * Range: 0..1023 (76000..81115 MHz)
     * Scale: 5
     * Offset: 76000
     */
    uint16_t can_stop_frequency_nrll;

    /**
     * Range: 0..511 (0..51.1 us)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t can_prp_factor_nrml;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radiation_ctrl;
};

/**
 * Signals in message MRR_Detection_064.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_064_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_64;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_64;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_64;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_64;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_64;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_64;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_64;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_64;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_64;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_64;
};

/**
 * Signals in message MRR_Detection_063.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_063_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_63;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_63;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_63;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_63;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_63;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_63;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_63;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_63;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_63;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_63;
};

/**
 * Signals in message MRR_Detection_062.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_062_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_62;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_62;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_62;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_62;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_62;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_62;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_62;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_62;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_62;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_62;
};

/**
 * Signals in message MRR_Detection_061.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_061_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_61;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_61;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_61;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_61;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_61;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_61;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_61;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_61;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_61;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_61;
};

/**
 * Signals in message MRR_Detection_060.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_060_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_60;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_60;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_60;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_60;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_60;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_60;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_60;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_60;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_60;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_60;
};

/**
 * Signals in message MRR_Detection_059.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_059_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_59;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_59;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_59;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_59;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_59;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_59;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_59;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_59;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_59;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_59;
};

/**
 * Signals in message MRR_Detection_058.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_058_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_58;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_58;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_58;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_58;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_58;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_58;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_58;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_58;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_58;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_58;
};

/**
 * Signals in message MRR_Detection_057.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_057_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_57;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_57;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_57;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_57;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_57;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_57;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_57;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_57;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_57;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_57;
};

/**
 * Signals in message MRR_Detection_056.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_056_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_56;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_56;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_56;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_56;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_56;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_56;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_56;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_56;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_56;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_56;
};

/**
 * Signals in message MRR_Detection_055.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_055_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_55;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_55;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_55;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_55;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_55;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_55;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_55;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_55;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_55;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_55;
};

/**
 * Signals in message MRR_Detection_048.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_048_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_48;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_48;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_48;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_48;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_48;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_48;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_48;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_48;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_48;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_48;
};

/**
 * Signals in message MRR_Detection_047.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_047_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_47;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_47;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_47;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_47;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_47;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_47;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_47;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_47;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_47;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_47;
};

/**
 * Signals in message MRR_Detection_046.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_046_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_46;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_46;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_46;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_46;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_46;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_46;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_46;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_46;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_46;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_46;
};

/**
 * Signals in message MRR_Detection_045.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_045_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_45;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_45;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_45;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_45;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_45;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_45;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_45;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_45;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_45;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_45;
};

/**
 * Signals in message MRR_Detection_044.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_044_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_44;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_44;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_44;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_44;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_44;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_44;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_44;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_44;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_44;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_44;
};

/**
 * Signals in message MRR_Detection_043.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_043_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_43;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_43;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_43;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_43;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_43;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_43;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_43;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_43;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_43;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_43;
};

/**
 * Signals in message MRR_Detection_042.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_042_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_42;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_42;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_42;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_42;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_42;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_42;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_42;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_42;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_42;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_42;
};

/**
 * Signals in message MRR_Detection_041.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_041_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_41;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_41;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_41;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_41;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_41;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_41;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_41;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_41;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_41;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_41;
};

/**
 * Signals in message MRR_Detection_040.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_040_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_40;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_40;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_40;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_40;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_40;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_40;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_40;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_40;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_40;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_40;
};

/**
 * Signals in message MRR_Detection_038.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_038_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_38;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_38;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_38;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_38;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_38;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_38;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_38;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_38;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_38;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_38;
};

/**
 * Signals in message MRR_Detection_037.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_037_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_37;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_37;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_37;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_37;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_37;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_37;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_37;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_37;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_37;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_37;
};

/**
 * Signals in message MRR_Detection_036.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_036_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_36;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_36;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_36;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_36;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_36;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_36;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_36;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_36;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_36;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_36;
};

/**
 * Signals in message MRR_Detection_035.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_035_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_35;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_35;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_35;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_35;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_35;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_35;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_35;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_35;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_35;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_35;
};

/**
 * Signals in message MRR_Detection_034.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_034_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_34;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_34;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_34;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_34;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_34;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_34;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_34;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_34;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_34;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_34;
};

/**
 * Signals in message MRR_Detection_033.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_033_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_33;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_33;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_33;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_33;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_33;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_33;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_33;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_33;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_33;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_33;
};

/**
 * Signals in message MRR_Detection_032.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_032_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_32;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_32;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_32;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_32;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_32;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_32;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_32;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_32;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_32;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_32;
};

/**
 * Signals in message MRR_Detection_031.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_031_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_31;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_31;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_31;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_31;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_31;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_31;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_31;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_31;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_31;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_31;
};

/**
 * Signals in message MRR_Detection_030.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_030_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_30;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_30;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_30;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_30;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_30;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_30;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_30;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_30;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_30;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_30;
};

/**
 * Signals in message MRR_Detection_029.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_029_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_29;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_29;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_29;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_29;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_29;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_29;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_29;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_29;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_29;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_29;
};

/**
 * Signals in message MRR_Detection_027.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_027_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_27;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_27;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_27;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_27;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_27;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_27;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_27;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_27;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_27;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_27;
};

/**
 * Signals in message MRR_Detection_026.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_026_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_26;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_26;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_26;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_26;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_26;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_26;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_26;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_26;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_26;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_26;
};

/**
 * Signals in message MRR_Detection_025.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_025_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_25;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_25;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_25;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_25;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_25;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_25;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_25;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_25;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_25;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_25;
};

/**
 * Signals in message MRR_Detection_024.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_024_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_24;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_24;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_24;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_24;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_24;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_24;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_24;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_24;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_24;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_24;
};

/**
 * Signals in message MRR_Detection_023.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_023_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_23;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_23;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_23;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_23;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_23;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_23;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_23;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_23;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_23;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_23;
};

/**
 * Signals in message MRR_Detection_022.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_022_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_22;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_22;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_22;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_22;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_22;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_22;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_22;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_22;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_22;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_22;
};

/**
 * Signals in message MRR_Detection_021.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_021_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_21;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_21;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_21;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_21;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_21;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_21;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_21;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_21;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_21;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_21;
};

/**
 * Signals in message MRR_Detection_020.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_020_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_20;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_20;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_20;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_20;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_20;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_20;
};

/**
 * Signals in message MRR_Detection_019.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_019_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_19;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_19;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_19;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_19;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_19;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_19;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_19;
};

/**
 * Signals in message MRR_Detection_018.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_018_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_18;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_18;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_18;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_18;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_18;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_18;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_18;
};

/**
 * Signals in message MRR_Detection_054.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_054_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_54;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_54;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_54;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_54;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_54;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_54;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_54;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_54;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_54;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_54;
};

/**
 * Signals in message MRR_Detection_053.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_053_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_53;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_53;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_53;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_53;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_53;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_53;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_53;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_53;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_53;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_53;
};

/**
 * Signals in message MRR_Detection_052.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_052_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_52;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_52;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_52;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_52;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_52;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_52;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_52;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_52;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_52;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_52;
};

/**
 * Signals in message MRR_Detection_051.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_051_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_51;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_51;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_51;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_51;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_51;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_51;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_51;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_51;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_51;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_51;
};

/**
 * Signals in message MRR_Detection_050.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_050_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_50;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_50;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_50;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_50;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_50;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_50;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_50;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_50;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_50;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_50;
};

/**
 * Signals in message MRR_Detection_049.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_049_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_49;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_49;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_49;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_49;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_49;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_49;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_49;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_49;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_49;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_49;
};

/**
 * Signals in message MRR_Detection_039.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_039_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_39;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_39;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_39;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_39;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_39;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_39;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_39;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_39;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_39;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_39;
};

/**
 * Signals in message MRR_Detection_028.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_028_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_28;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_28;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_28;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_28;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_28;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_28;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_28;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_28;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_28;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_28;
};

/**
 * Signals in message MRR_Detection_017.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_017_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_17;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_17;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_17;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_17;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_17;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_17;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_17;
};

/**
 * Signals in message MRR_Detection_016.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_016_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_16;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_16;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_16;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_16;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_16;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_16;
};

/**
 * Signals in message MRR_Detection_015.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_015_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_15;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_15;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_15;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_15;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_15;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_15;
};

/**
 * Signals in message MRR_Detection_014.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_014_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_14;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_14;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_14;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_14;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_14;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_14;
};

/**
 * Signals in message MRR_Detection_013.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_013_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_13;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_13;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_13;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_13;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_13;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_13;
};

/**
 * Signals in message MRR_Detection_012.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_012_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_12;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_12;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_12;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_12;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_12;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_12;
};

/**
 * Signals in message MRR_Detection_011.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_011_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_11;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_11;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_11;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_11;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_11;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_11;
};

/**
 * Signals in message MRR_Detection_010.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_010_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_10;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_10;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_10;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_10;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_10;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_10;
};

/**
 * Signals in message MRR_Detection_009.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_009_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_09;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_09;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_09;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_09;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_09;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_09;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_09;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_09;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_09;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_09;
};

/**
 * Signals in message MRR_Detection_008.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_008_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_08;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_08;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_08;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_08;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_08;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_08;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_08;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_08;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_08;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_08;
};

/**
 * Signals in message MRR_Detection_007.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_007_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_07;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_07;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_07;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_07;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_07;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_07;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_07;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_07;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_07;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_07;
};

/**
 * Signals in message MRR_Detection_006.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_006_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_06;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_06;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_06;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_06;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_06;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_06;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_06;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_06;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_06;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_06;
};

/**
 * Signals in message MRR_Detection_005.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_005_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_05;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_05;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_05;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_05;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_05;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_05;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_05;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_05;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_05;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_05;
};

/**
 * Signals in message MRR_Detection_003.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_003_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_03;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_03;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_03;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_03;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_03;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_03;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_03;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_03;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_03;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_03;
};

/**
 * Signals in message MRR_Detection_002.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_002_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_02;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_02;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_02;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_02;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_02;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_02;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_02;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_02;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_02;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_02;
};

/**
 * Signals in message MRR_Status_CANVersion.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_status_can_version_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_minor_mrr;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_pcan_major_mrr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_usc_section_compatibility;
};

/**
 * Signals in message MRR_Status_Radar.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_status_radar_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_xcvr_operational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_not_op;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_mnr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_sidelobe;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_overheat_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_align_out_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_ext_cond_nok;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_align_not_start;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_blockage_sidelobe_filter_val;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_interference_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_recommend_unconverge;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_radar_align_incomplete;
};

/**
 * Signals in message MRR_Detection_001.
 *
 * All signal values are as on the CAN bus.
 */
struct mrr_pcan_core_v07_02_mrr_detection_001_t {
    /**
     * Range: 0..127 (-64..63 dBsm)
     * Scale: 1
     * Offset: -64
     */
    uint8_t can_det_amplitude_01;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_valid_level_01;

    /**
     * Range: 0..16383 (-128..127.984375 m/s)
     * Scale: 0.015625
     * Offset: -128
     */
    uint16_t can_det_range_rate_01;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_scan_index_2_lsb_01;

    /**
     * Range: 0..16383 (0..255.984375 m)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t can_det_range_01;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_confid_azimuth_01;

    /**
     * Range: 0..16383 (-3.1416..3.1396422 rad)
     * Scale: 0.0003834
     * Offset: -3.1416
     */
    uint16_t can_det_azimuth_01;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_host_veh_clutter_01;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_nd_target_01;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_det_super_res_target_01;
};

/**
 * Pack message IFV_TracksChange.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_tracks_change_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ifv_tracks_change_t *src_p,
    size_t size);

/**
 * Unpack message IFV_TracksChange.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_tracks_change_unpack(
    struct mrr_pcan_core_v07_02_ifv_tracks_change_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_tracks_change_f_radar_unreasonable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_tracks_change_f_radar_unreasonable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_tracks_change_f_radar_unreasonable_is_in_range(uint8_t value);

/**
 * Pack message Active_Fault_Latched_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_active_fault_latched_2_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_active_fault_latched_2_t *src_p,
    size_t size);

/**
 * Unpack message Active_Fault_Latched_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_active_fault_latched_2_unpack(
    struct mrr_pcan_core_v07_02_active_fault_latched_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_2_car_cfg_not_configured_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_2_car_cfg_not_configured_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_2_car_cfg_not_configured_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_2_module_not_configured_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_2_module_not_configured_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_2_module_not_configured_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_2_vin_signal_compare_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_2_vin_signal_compare_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_2_vin_signal_compare_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_missing_msg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_missing_msg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_missing_msg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_data_range_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_data_range_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_2_ipma_pcan_data_range_check_is_in_range(uint8_t value);

/**
 * Pack message Active_Fault_Latched_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_active_fault_latched_1_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_active_fault_latched_1_t *src_p,
    size_t size);

/**
 * Unpack message Active_Fault_Latched_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_active_fault_latched_1_unpack(
    struct mrr_pcan_core_v07_02_active_fault_latched_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_application_flash_checksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_application_flash_checksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_application_flash_checksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_program_calibration_flash_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_program_calibration_flash_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_program_calibration_flash_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_keep_alive_checksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_keep_alive_checksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_keep_alive_checksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte0_bit6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_usc_validation_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_usc_validation_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_usc_validation_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_ram_memory_test_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_ram_memory_test_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_ram_memory_test_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_pll_lock_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_pll_lock_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_pll_lock_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_watchdog_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_watchdog_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_watchdog_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_stack_overflow_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_stack_overflow_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_stack_overflow_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_instruction_set_check_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_instruction_set_check_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_instruction_set_check_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte1_bit7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_pcan_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_pcan_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_pcan_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_pcan_missing_msg_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_pcan_missing_msg_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_pcan_missing_msg_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte2_bit6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_id_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_id_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_id_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_v_5_supply_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_v_5_supply_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_v_5_supply_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_raw_supply_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_raw_supply_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_raw_supply_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_dac_supply_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_dac_supply_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_v_3p3_dac_supply_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_thermistor_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_thermistor_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_thermistor_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte3_bit4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte3_bit4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte3_bit4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_v_1p25_supply_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_v_1p25_supply_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_v_1p25_supply_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_battery_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_battery_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_battery_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_battery_low_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_battery_low_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_battery_low_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_factory_alignment_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_factory_alignment_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_factory_alignment_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_horizontal_alignment_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_horizontal_alignment_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_horizontal_alignment_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_vertical_alignment_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_vertical_alignment_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_vertical_alignment_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_microprocessor_temp_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_microprocessor_temp_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_microprocessor_temp_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_unreasonable_radar_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_unreasonable_radar_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_unreasonable_radar_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_alignment_routine_failed_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_alignment_routine_failed_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_alignment_routine_failed_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_temp_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_temp_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_temp_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_ecu_temp_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_ecu_temp_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_ecu_temp_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_mnr_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_mnr_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_mnr_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_sidelobe_blockage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_sidelobe_blockage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_sidelobe_blockage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_analog_converter_devic_spi_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_analog_converter_devic_spi_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_analog_converter_devic_spi_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_freq_synthesizer_spi_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_freq_synthesizer_spi_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_freq_synthesizer_spi_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_xcvr_device_spi_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_xcvr_device_spi_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_xcvr_device_spi_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte5_bit7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_power_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_power_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_transmitter_power_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_local_osc_power_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_local_osc_power_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_local_osc_power_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_saturated_tuning_freq_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_saturated_tuning_freq_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_saturated_tuning_freq_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_tuning_sensitivity_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_tuning_sensitivity_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_tuning_sensitivity_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte6_bit5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_dsp_overrun_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_dsp_overrun_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_dsp_overrun_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_loop_bw_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_loop_bw_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_loop_bw_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_host_chksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_host_chksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_host_chksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_host_to_arm_chksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_host_to_arm_chksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_host_to_arm_chksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_ds_pto_arm_chksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_ds_pto_arm_chksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_ds_pto_arm_chksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_dsp_chksum_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_dsp_chksum_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_ar_mto_dsp_chksum_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_active_fault_latched_1_active_flt_latched_byte7_bit7_is_in_range(uint8_t value);

/**
 * Pack message Sync_Timestamp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_sync_timestamp_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_sync_timestamp_t *src_p,
    size_t size);

/**
 * Unpack message Sync_Timestamp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_sync_timestamp_unpack(
    struct mrr_pcan_core_v07_02_sync_timestamp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_sync_timestamp_can_vfp_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_sync_timestamp_can_vfp_timestamp_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_sync_timestamp_can_vfp_timestamp_is_in_range(uint64_t value);

/**
 * Pack message XCP_MRR_DAQ_RESP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_daq_resp_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_xcp_mrr_daq_resp_t *src_p,
    size_t size);

/**
 * Unpack message XCP_MRR_DAQ_RESP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_daq_resp_unpack(
    struct mrr_pcan_core_v07_02_xcp_mrr_daq_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_daq_resp_mrr_xcp_daq_resp_byte7_is_in_range(uint8_t value);

/**
 * Pack message XCP_MRR_DTO_RESP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_dto_resp_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_xcp_mrr_dto_resp_t *src_p,
    size_t size);

/**
 * Unpack message XCP_MRR_DTO_RESP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_dto_resp_unpack(
    struct mrr_pcan_core_v07_02_xcp_mrr_dto_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_resp_mrr_xcp_dto_resp_byte7_is_in_range(uint8_t value);

/**
 * Pack message XCP_MRR_DTO_REQ.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_dto_req_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_xcp_mrr_dto_req_t *src_p,
    size_t size);

/**
 * Unpack message XCP_MRR_DTO_REQ.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_dto_req_unpack(
    struct mrr_pcan_core_v07_02_xcp_mrr_dto_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_dto_req_mrr_xcp_dto_cmd_byte7_is_in_range(uint8_t value);

/**
 * Pack message XCP_MRR_CTO_RESP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_cto_resp_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_xcp_mrr_cto_resp_t *src_p,
    size_t size);

/**
 * Unpack message XCP_MRR_CTO_RESP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_cto_resp_unpack(
    struct mrr_pcan_core_v07_02_xcp_mrr_cto_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_resp_mrr_xcp_cto_resp_byte7_is_in_range(uint8_t value);

/**
 * Pack message XCP_MRR_CTO_REQ.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_cto_req_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_xcp_mrr_cto_req_t *src_p,
    size_t size);

/**
 * Unpack message XCP_MRR_CTO_REQ.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_xcp_mrr_cto_req_unpack(
    struct mrr_pcan_core_v07_02_xcp_mrr_cto_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_xcp_mrr_cto_req_mrr_xcp_cto_cmd_byte7_is_in_range(uint8_t value);

/**
 * Pack message Ford_Diag_Req_Func.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_req_func_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ford_diag_req_func_t *src_p,
    size_t size);

/**
 * Unpack message Ford_Diag_Req_Func.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_req_func_unpack(
    struct mrr_pcan_core_v07_02_ford_diag_req_func_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_ford_diag_req_func_tester_functional_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ford_diag_req_func_tester_functional_req_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ford_diag_req_func_tester_functional_req_is_in_range(uint64_t value);

/**
 * Pack message Ford_Diag_Resp_Phys.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_resp_phys_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ford_diag_resp_phys_t *src_p,
    size_t size);

/**
 * Unpack message Ford_Diag_Resp_Phys.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_resp_phys_unpack(
    struct mrr_pcan_core_v07_02_ford_diag_resp_phys_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_ford_diag_resp_phys_tester_physical_res_ccm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ford_diag_resp_phys_tester_physical_res_ccm_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ford_diag_resp_phys_tester_physical_res_ccm_is_in_range(uint64_t value);

/**
 * Pack message Ford_Diag_Req_Phys.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_req_phys_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ford_diag_req_phys_t *src_p,
    size_t size);

/**
 * Unpack message Ford_Diag_Req_Phys.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ford_diag_req_phys_unpack(
    struct mrr_pcan_core_v07_02_ford_diag_req_phys_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_ford_diag_req_phys_tester_physical_req_ccm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ford_diag_req_phys_tester_physical_req_ccm_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ford_diag_req_phys_tester_physical_req_ccm_is_in_range(uint64_t value);

/**
 * Pack message Wheel_Speed_Msg.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_wheel_speed_msg_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_wheel_speed_msg_t *src_p,
    size_t size);

/**
 * Unpack message Wheel_Speed_Msg.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_wheel_speed_msg_unpack(
    struct mrr_pcan_core_v07_02_wheel_speed_msg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_left_wheel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_left_wheel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_left_wheel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_right_wheel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_right_wheel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_front_right_wheel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_left_wheel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_left_wheel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_left_wheel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_right_wheel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_right_wheel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_wheel_speed_msg_can_speed_rear_right_wheel_is_in_range(uint16_t value);

/**
 * Pack message VEHICLE_STATE_MSG3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg3_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_vehicle_state_msg3_t *src_p,
    size_t size);

/**
 * Unpack message VEHICLE_STATE_MSG3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg3_unpack(
    struct mrr_pcan_core_v07_02_vehicle_state_msg3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg3_can_veh_long_accel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg3_yaw_rate_reference_valid_is_in_range(uint8_t value);

/**
 * Pack message VEHICLE_STATE_MSG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg2_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_vehicle_state_msg2_t *src_p,
    size_t size);

/**
 * Unpack message VEHICLE_STATE_MSG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg2_unpack(
    struct mrr_pcan_core_v07_02_vehicle_state_msg2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_yaw_rate_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_fsm_vehicle_velocity_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_vehicle_state_msg2_can_vehicle_index_4_fa_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_can_vehicle_index_4_fa_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_can_vehicle_index_4_fa_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg2_can_steering_whl_angle_is_in_range(uint16_t value);

/**
 * Pack message VEHICLE_STATE_MSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg1_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_vehicle_state_msg1_t *src_p,
    size_t size);

/**
 * Unpack message VEHICLE_STATE_MSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_vehicle_state_msg1_unpack(
    struct mrr_pcan_core_v07_02_vehicle_state_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_major_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_major_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_major_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_minor_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_minor_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_intf_minor_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_turn_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_turn_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_turn_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_stationary_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_stationary_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_stationary_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_high_wheel_slip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_high_wheel_slip_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_high_wheel_slip_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_brake_pedal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_brake_pedal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_brake_pedal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_reverse_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_reverse_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_reverse_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_speed_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_speed_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_speed_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_front_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_front_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_wiper_front_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_washer_front_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_washer_front_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_washer_front_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_fcw_sensitivity_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_fcw_sensitivity_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_fcw_sensitivity_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_main_beam_indication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_main_beam_indication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_main_beam_indication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_beam_shape_actual_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_index_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_vehicle_state_msg1_can_vehicle_index_is_in_range(uint16_t value);

/**
 * Pack message MRR_Status_SerialNumber.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_serial_number_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_status_serial_number_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Status_SerialNumber.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_serial_number_unpack(
    struct mrr_pcan_core_v07_02_mrr_status_serial_number_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_mrr_status_serial_number_can_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_serial_number_can_serial_number_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_serial_number_can_serial_number_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_status_serial_number_can_sequence_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_serial_number_can_sequence_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_serial_number_can_sequence_number_is_in_range(uint16_t value);

/**
 * Pack message System_Control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_control_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_control_t *src_p,
    size_t size);

/**
 * Unpack message System_Control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_control_unpack(
    struct mrr_pcan_core_v07_02_system_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_system_control_can_inst_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_control_can_inst_mode_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_control_can_inst_mode_is_in_range(uint16_t value);

/**
 * Pack message MRR_Status_SwVersion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_sw_version_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_status_sw_version_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Status_SwVersion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_sw_version_unpack(
    struct mrr_pcan_core_v07_02_mrr_status_sw_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_release_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_release_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_release_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_promote_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_promote_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_promote_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_field_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_field_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_sw_field_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_release_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_release_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_release_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_promote_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_promote_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_promote_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_field_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_field_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_sw_version_can_pbl_field_revision_is_in_range(uint8_t value);

/**
 * Pack message IFV_Status_Compensated.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_compensated_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ifv_status_compensated_t *src_p,
    size_t size);

/**
 * Unpack message IFV_Status_Compensated.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_compensated_unpack(
    struct mrr_pcan_core_v07_02_ifv_status_compensated_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_calc_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_bias_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_bias_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_compensated_can_yaw_rate_bias_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_ifv_status_compensated_can_veh_spd_comp_factor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_compensated_can_veh_spd_comp_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_compensated_can_veh_spd_comp_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_ifv_status_compensated_can_vehicle_speed_calc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_compensated_can_vehicle_speed_calc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_compensated_can_vehicle_speed_calc_is_in_range(uint16_t value);

/**
 * Pack message LROS_CarCfg_Ford.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_car_cfg_ford_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_car_cfg_ford_t *src_p,
    size_t size);

/**
 * Unpack message LROS_CarCfg_Ford.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_car_cfg_ford_unpack(
    struct mrr_pcan_core_v07_02_lros_car_cfg_ford_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgengine_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgengine_ford_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgengine_ford_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgvehtype_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgvehtype_ford_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_can_lros_carcfgvehtype_ford_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_upper_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_upper_limit_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_upper_limit_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_lower_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_lower_limit_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_lower_limit_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_ground_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_ground_offset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_can_fa_vert_ground_offset_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t mrr_pcan_core_v07_02_lros_car_cfg_ford_k_radar_azimuth_polarity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_car_cfg_ford_k_radar_azimuth_polarity_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_car_cfg_ford_k_radar_azimuth_polarity_is_in_range(int8_t value);

/**
 * Pack message System_TDBlockage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_td_blockage_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_td_blockage_t *src_p,
    size_t size);

/**
 * Unpack message System_TDBlockage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_td_blockage_unpack(
    struct mrr_pcan_core_v07_02_system_td_blockage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_td_blockage_can_found_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_td_blockage_can_found_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_td_blockage_can_found_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_td_blockage_can_blockage_td_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_td_blockage_can_blockage_td_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_td_blockage_can_blockage_td_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_td_blockage_can_td_scan_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_td_blockage_can_td_scan_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_td_blockage_can_td_scan_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_mov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_mov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_mov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_stat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_stat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_td_blockage_can_number_of_tracks_stat_is_in_range(uint8_t value);

/**
 * Pack message LROS_VIN_part3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part3_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_vin_part3_t *src_p,
    size_t size);

/**
 * Unpack message LROS_VIN_part3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part3_unpack(
    struct mrr_pcan_core_v07_02_lros_vin_part3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_vin_part3_vin_part3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_vin_part3_vin_part3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_vin_part3_vin_part3_is_in_range(uint8_t value);

/**
 * Pack message LROS_VIN_part2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part2_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_vin_part2_t *src_p,
    size_t size);

/**
 * Unpack message LROS_VIN_part2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part2_unpack(
    struct mrr_pcan_core_v07_02_lros_vin_part2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_lros_vin_part2_vin_part2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_vin_part2_vin_part2_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_vin_part2_vin_part2_is_in_range(uint64_t value);

/**
 * Pack message LROS_VIN_part1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part1_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_vin_part1_t *src_p,
    size_t size);

/**
 * Unpack message LROS_VIN_part1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_vin_part1_unpack(
    struct mrr_pcan_core_v07_02_lros_vin_part1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mrr_pcan_core_v07_02_lros_vin_part1_vin_part1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_vin_part1_vin_part1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_vin_part1_vin_part1_is_in_range(uint64_t value);

/**
 * Pack message LROS_OdometerValue.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_odometer_value_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_odometer_value_t *src_p,
    size_t size);

/**
 * Unpack message LROS_OdometerValue.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_odometer_value_unpack(
    struct mrr_pcan_core_v07_02_lros_odometer_value_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mrr_pcan_core_v07_02_lros_odometer_value_can_odometer_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_odometer_value_can_odometer_ford_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_odometer_value_can_odometer_ford_is_in_range(uint32_t value);

/**
 * Pack message LROS_SignalsActualValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_signals_actual_values_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_signals_actual_values_t *src_p,
    size_t size);

/**
 * Unpack message LROS_SignalsActualValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_signals_actual_values_unpack(
    struct mrr_pcan_core_v07_02_lros_signals_actual_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_veh_batt_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_veh_batt_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_veh_batt_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_gear_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_gear_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_gear_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_ambient_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_ambient_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_ambient_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_ign_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_ign_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_ign_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_cruise_status_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_cruise_status_ford_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_cruise_status_ford_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_motive_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_motive_ford_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_motive_ford_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_supp_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_supp_ford_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_signals_actual_values_can_power_supp_ford_is_in_range(uint8_t value);

/**
 * Pack message LROS_Ford_Specific.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_lros_ford_specific_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_lros_ford_specific_t *src_p,
    size_t size);

/**
 * Unpack message LROS_Ford_Specific.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_lros_ford_specific_unpack(
    struct mrr_pcan_core_v07_02_lros_ford_specific_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mrr_pcan_core_v07_02_lros_ford_specific_can_globalrealtime_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_ford_specific_can_globalrealtime_ford_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_ford_specific_can_globalrealtime_ford_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_lros_ford_specific_can_veh_speed_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_ford_specific_can_veh_speed_ford_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_ford_specific_can_veh_speed_ford_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_lros_ford_specific_can_veh_yaw_ford_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_lros_ford_specific_can_veh_yaw_ford_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_lros_ford_specific_can_veh_yaw_ford_is_in_range(uint16_t value);

/**
 * Pack message IFV_Status_VFPCANVersion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_vfpcan_version_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ifv_status_vfpcan_version_t *src_p,
    size_t size);

/**
 * Unpack message IFV_Status_VFPCANVersion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_vfpcan_version_unpack(
    struct mrr_pcan_core_v07_02_ifv_status_vfpcan_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_major_ifv_vfp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_major_ifv_vfp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_major_ifv_vfp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_minor_ifv_vfp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_minor_ifv_vfp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_vfpcan_version_can_pcan_minor_ifv_vfp_is_in_range(uint8_t value);

/**
 * Pack message IFV_Status_HostCANVersion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_host_can_version_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_ifv_status_host_can_version_t *src_p,
    size_t size);

/**
 * Unpack message IFV_Status_HostCANVersion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_ifv_status_host_can_version_unpack(
    struct mrr_pcan_core_v07_02_ifv_status_host_can_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_major_ifv_host_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_major_ifv_host_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_major_ifv_host_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_minor_ifv_host_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_minor_ifv_host_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_ifv_status_host_can_version_can_pcan_minor_ifv_host_is_in_range(uint8_t value);

/**
 * Pack message MRR_Header_SensorPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_sensor_position_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_header_sensor_position_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Header_SensorPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_sensor_position_unpack(
    struct mrr_pcan_core_v07_02_mrr_header_sensor_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_hangle_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_hangle_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_hangle_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_long_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_long_offset_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_long_offset_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_lat_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_lat_offset_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_lat_offset_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_polarity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_polarity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_position_can_sensor_polarity_is_in_range(uint8_t value);

/**
 * Pack message MRR_Header_SensorCoverage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_sensor_coverage_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_header_sensor_coverage_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Header_SensorCoverage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_sensor_coverage_unpack(
    struct mrr_pcan_core_v07_02_mrr_header_sensor_coverage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_range_coverage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_range_coverage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_range_coverage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_doppler_coverage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_doppler_coverage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_doppler_coverage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_sensor_fov_hor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_sensor_fov_hor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_sensor_coverage_can_sensor_fov_hor_is_in_range(uint8_t value);

/**
 * Pack message MRR_Header_AlignmentState.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_alignment_state_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_header_alignment_state_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Header_AlignmentState.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_alignment_state_unpack(
    struct mrr_pcan_core_v07_02_mrr_header_alignment_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_qf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_qf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_qf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_ref_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_alignment_state_can_auto_align_hangle_ref_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_alignment_state_can_alignment_status_is_in_range(uint8_t value);

/**
 * Pack message MRR_Header_Timestamps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_timestamps_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_header_timestamps_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Header_Timestamps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_timestamps_unpack(
    struct mrr_pcan_core_v07_02_mrr_header_timestamps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mrr_pcan_core_v07_02_mrr_header_timestamps_can_sensor_time_stamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_timestamps_can_sensor_time_stamp_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_timestamps_can_sensor_time_stamp_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_timestamps_can_det_time_since_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_timestamps_can_det_time_since_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_timestamps_can_det_time_since_meas_is_in_range(uint16_t value);

/**
 * Pack message MRR_Header_InformationDetections.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_information_detections_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_header_information_detections_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Header_InformationDetections.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_header_information_detections_unpack(
    struct mrr_pcan_core_v07_02_mrr_header_information_detections_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_index_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_index_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_information_detections_can_look_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_information_detections_can_scan_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_information_detections_can_scan_index_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_information_detections_can_scan_index_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_header_information_detections_can_number_of_det_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_information_detections_can_number_of_det_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_information_detections_can_number_of_det_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_header_information_detections_can_align_updates_done_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_header_information_detections_can_align_updates_done_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_header_information_detections_can_align_updates_done_is_in_range(uint16_t value);

/**
 * Pack message MRR_Control_Alignment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_alignment_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_control_alignment_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Control_Alignment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_alignment_unpack(
    struct mrr_pcan_core_v07_02_mrr_control_alignment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_alignment_can_fac_align_cmd_3_is_in_range(uint8_t value);

/**
 * Pack message MRR_Status_Temp_Volt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_temp_volt_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_status_temp_volt_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Status_Temp_Volt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_temp_volt_unpack(
    struct mrr_pcan_core_v07_02_mrr_status_temp_volt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_dac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_dac_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_dac_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_thermistor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_thermistor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_processor_thermistor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_raw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_3_3_v_raw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_mmic_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_mmic_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_mmic_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_5_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_5_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_5_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_1_25_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_1_25_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_1_25_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_temp_volt_can_batt_volts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_temp_volt_can_batt_volts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_temp_volt_can_batt_volts_is_in_range(uint8_t value);

/**
 * Pack message System_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_status_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_status_t *src_p,
    size_t size);

/**
 * Unpack message System_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_status_unpack(
    struct mrr_pcan_core_v07_02_system_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_system_status_can_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_vehicle_speed_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_vehicle_speed_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_vehicle_speed_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_vehicle_speed_validity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_vehicle_speed_validity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_vehicle_speed_validity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_vehicle_stat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_vehicle_stat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_vehicle_stat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_system_status_can_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_yaw_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_yaw_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_yaw_rate_validity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_yaw_rate_validity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_yaw_rate_validity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_wiper_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_wiper_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_wiper_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_status_can_day_night_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_status_can_day_night_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_status_can_day_night_status_is_in_range(uint8_t value);

/**
 * Pack message MRR_Control_Msg_FR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_msg_fr_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_control_msg_fr_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Control_Msg_FR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_msg_fr_unpack(
    struct mrr_pcan_core_v07_02_mrr_control_msg_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frll_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frll_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_sensitivity_profile_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_sensitivity_profile_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_sensitivity_profile_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frml_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_desired_sweep_bw_frml_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_stop_frequency_frml_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_fr_can_prp_factor_frml_is_in_range(uint16_t value);

/**
 * Pack message MRR_Detection_004.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_004_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_004_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_004.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_004_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_004_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_amplitude_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_amplitude_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_amplitude_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_valid_level_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_valid_level_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_valid_level_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_rate_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_rate_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_rate_04_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_scan_index_2_lsb_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_scan_index_2_lsb_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_scan_index_2_lsb_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_range_04_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_confid_azimuth_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_confid_azimuth_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_confid_azimuth_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_azimuth_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_azimuth_04_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_azimuth_04_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_host_veh_clutter_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_host_veh_clutter_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_host_veh_clutter_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_nd_target_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_nd_target_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_nd_target_04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_004_can_det_super_res_target_04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_004_can_det_super_res_target_04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_004_can_det_super_res_target_04_is_in_range(uint8_t value);

/**
 * Pack message System_AlignFactory2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_align_factory2_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_align_factory2_t *src_p,
    size_t size);

/**
 * Unpack message System_AlignFactory2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_align_factory2_unpack(
    struct mrr_pcan_core_v07_02_system_align_factory2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory2_can_fac_align_max_nt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory2_can_fac_align_max_nt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory2_can_fac_align_max_nt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_positions_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_positions_total_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_positions_total_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory2_can_fac_plate_tilt_angle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory2_can_lateral_mounting_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory2_can_lateral_mounting_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory2_can_lateral_mounting_offset_is_in_range(uint8_t value);

/**
 * Pack message System_AlignFactory1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_align_factory1_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_align_factory1_t *src_p,
    size_t size);

/**
 * Unpack message System_AlignFactory1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_align_factory1_unpack(
    struct mrr_pcan_core_v07_02_system_align_factory1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_align_samp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_align_samp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_align_samp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_space_hor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_space_hor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_mtg_space_hor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_m2_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_m2_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_m2_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_r2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_r2_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_align_factory1_can_fac_tgt_range_r2_m_is_in_range(uint8_t value);

/**
 * Pack message System_Alignment2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_alignment2_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_alignment2_t *src_p,
    size_t size);

/**
 * Unpack message System_Alignment2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_alignment2_unpack(
    struct mrr_pcan_core_v07_02_system_alignment2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_aalign_avg_ctr_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_aalign_avg_ctr_total_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_aalign_avg_ctr_total_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_align_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_align_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_align_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_serv_align_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_serv_align_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_serv_align_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_angle_mounting_hoffset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_angle_mounting_hoffset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_angle_mounting_hoffset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_lr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_lr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_lr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_mr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_mr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_radar_fov_mr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_radar_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_radar_height_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_radar_height_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment2_can_serv_align_updates_need_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment2_can_serv_align_updates_need_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment2_can_serv_align_updates_need_is_in_range(uint8_t value);

/**
 * Pack message System_Alignment1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_system_alignment1_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_system_alignment1_t *src_p,
    size_t size);

/**
 * Unpack message System_Alignment1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_system_alignment1_unpack(
    struct mrr_pcan_core_v07_02_system_alignment1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment1_can_blockage_disable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_blockage_disable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_blockage_disable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment1_can_use_angle_misalignment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_use_angle_misalignment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_use_angle_misalignment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment1_can_mrr_upside_down_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_mrr_upside_down_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_mrr_upside_down_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_system_alignment1_can_scan_index_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_scan_index_ack_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_scan_index_ack_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_system_alignment1_can_angle_misalignment_hor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_angle_misalignment_hor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_angle_misalignment_hor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_system_alignment1_can_blockage_filter_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_system_alignment1_can_blockage_filter_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_system_alignment1_can_blockage_filter_output_is_in_range(uint8_t value);

/**
 * Pack message MRR_Control_Msg_NR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_msg_nr_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_control_msg_nr_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Control_Msg_NR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_control_msg_nr_unpack(
    struct mrr_pcan_core_v07_02_mrr_control_msg_nr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrll_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrll_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrml_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrml_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_desired_sweep_bw_nrml_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_stop_frequency_nrll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_prp_factor_nrml_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_control_msg_nr_can_radiation_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_control_msg_nr_can_radiation_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_control_msg_nr_can_radiation_ctrl_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_064.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_064_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_064_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_064.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_064_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_064_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_amplitude_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_amplitude_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_amplitude_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_valid_level_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_valid_level_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_valid_level_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_rate_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_rate_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_rate_64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_scan_index_2_lsb_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_scan_index_2_lsb_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_scan_index_2_lsb_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_range_64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_confid_azimuth_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_confid_azimuth_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_confid_azimuth_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_azimuth_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_azimuth_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_azimuth_64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_host_veh_clutter_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_host_veh_clutter_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_host_veh_clutter_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_nd_target_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_nd_target_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_nd_target_64_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_064_can_det_super_res_target_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_064_can_det_super_res_target_64_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_064_can_det_super_res_target_64_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_063.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_063_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_063_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_063.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_063_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_063_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_amplitude_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_amplitude_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_amplitude_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_valid_level_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_valid_level_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_valid_level_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_rate_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_rate_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_rate_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_scan_index_2_lsb_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_scan_index_2_lsb_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_scan_index_2_lsb_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_range_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_confid_azimuth_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_confid_azimuth_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_confid_azimuth_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_azimuth_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_azimuth_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_azimuth_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_host_veh_clutter_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_host_veh_clutter_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_host_veh_clutter_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_nd_target_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_nd_target_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_nd_target_63_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_063_can_det_super_res_target_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_063_can_det_super_res_target_63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_063_can_det_super_res_target_63_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_062.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_062_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_062_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_062.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_062_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_062_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_amplitude_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_amplitude_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_amplitude_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_valid_level_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_valid_level_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_valid_level_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_rate_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_rate_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_rate_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_scan_index_2_lsb_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_scan_index_2_lsb_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_scan_index_2_lsb_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_range_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_confid_azimuth_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_confid_azimuth_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_confid_azimuth_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_azimuth_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_azimuth_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_azimuth_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_host_veh_clutter_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_host_veh_clutter_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_host_veh_clutter_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_nd_target_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_nd_target_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_nd_target_62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_062_can_det_super_res_target_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_062_can_det_super_res_target_62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_062_can_det_super_res_target_62_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_061.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_061_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_061_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_061.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_061_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_061_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_amplitude_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_amplitude_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_amplitude_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_valid_level_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_valid_level_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_valid_level_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_rate_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_rate_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_rate_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_scan_index_2_lsb_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_scan_index_2_lsb_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_scan_index_2_lsb_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_range_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_confid_azimuth_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_confid_azimuth_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_confid_azimuth_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_azimuth_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_azimuth_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_azimuth_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_host_veh_clutter_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_host_veh_clutter_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_host_veh_clutter_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_nd_target_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_nd_target_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_nd_target_61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_061_can_det_super_res_target_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_061_can_det_super_res_target_61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_061_can_det_super_res_target_61_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_060.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_060_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_060_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_060.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_060_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_060_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_amplitude_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_amplitude_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_amplitude_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_valid_level_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_valid_level_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_valid_level_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_rate_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_rate_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_rate_60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_scan_index_2_lsb_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_scan_index_2_lsb_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_scan_index_2_lsb_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_range_60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_confid_azimuth_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_confid_azimuth_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_confid_azimuth_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_azimuth_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_azimuth_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_azimuth_60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_host_veh_clutter_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_host_veh_clutter_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_host_veh_clutter_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_nd_target_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_nd_target_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_nd_target_60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_060_can_det_super_res_target_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_060_can_det_super_res_target_60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_060_can_det_super_res_target_60_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_059.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_059_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_059_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_059.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_059_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_059_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_amplitude_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_amplitude_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_amplitude_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_valid_level_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_valid_level_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_valid_level_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_rate_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_rate_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_rate_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_scan_index_2_lsb_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_scan_index_2_lsb_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_scan_index_2_lsb_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_range_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_confid_azimuth_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_confid_azimuth_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_confid_azimuth_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_azimuth_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_azimuth_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_azimuth_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_host_veh_clutter_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_host_veh_clutter_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_host_veh_clutter_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_nd_target_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_nd_target_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_nd_target_59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_059_can_det_super_res_target_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_059_can_det_super_res_target_59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_059_can_det_super_res_target_59_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_058.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_058_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_058_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_058.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_058_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_058_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_amplitude_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_amplitude_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_amplitude_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_valid_level_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_valid_level_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_valid_level_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_rate_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_rate_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_rate_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_scan_index_2_lsb_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_scan_index_2_lsb_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_scan_index_2_lsb_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_range_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_confid_azimuth_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_confid_azimuth_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_confid_azimuth_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_azimuth_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_azimuth_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_azimuth_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_host_veh_clutter_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_host_veh_clutter_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_host_veh_clutter_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_nd_target_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_nd_target_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_nd_target_58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_058_can_det_super_res_target_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_058_can_det_super_res_target_58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_058_can_det_super_res_target_58_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_057.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_057_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_057_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_057.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_057_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_057_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_amplitude_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_amplitude_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_amplitude_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_valid_level_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_valid_level_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_valid_level_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_rate_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_rate_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_rate_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_scan_index_2_lsb_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_scan_index_2_lsb_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_scan_index_2_lsb_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_range_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_confid_azimuth_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_confid_azimuth_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_confid_azimuth_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_azimuth_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_azimuth_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_azimuth_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_host_veh_clutter_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_host_veh_clutter_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_host_veh_clutter_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_nd_target_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_nd_target_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_nd_target_57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_057_can_det_super_res_target_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_057_can_det_super_res_target_57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_057_can_det_super_res_target_57_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_056.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_056_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_056_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_056.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_056_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_056_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_amplitude_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_amplitude_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_amplitude_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_valid_level_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_valid_level_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_valid_level_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_rate_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_rate_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_rate_56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_scan_index_2_lsb_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_scan_index_2_lsb_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_scan_index_2_lsb_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_range_56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_confid_azimuth_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_confid_azimuth_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_confid_azimuth_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_azimuth_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_azimuth_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_azimuth_56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_host_veh_clutter_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_host_veh_clutter_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_host_veh_clutter_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_nd_target_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_nd_target_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_nd_target_56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_056_can_det_super_res_target_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_056_can_det_super_res_target_56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_056_can_det_super_res_target_56_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_055.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_055_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_055_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_055.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_055_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_055_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_amplitude_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_amplitude_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_amplitude_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_valid_level_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_valid_level_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_valid_level_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_rate_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_rate_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_rate_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_scan_index_2_lsb_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_scan_index_2_lsb_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_scan_index_2_lsb_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_range_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_confid_azimuth_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_confid_azimuth_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_confid_azimuth_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_azimuth_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_azimuth_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_azimuth_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_host_veh_clutter_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_host_veh_clutter_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_host_veh_clutter_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_nd_target_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_nd_target_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_nd_target_55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_055_can_det_super_res_target_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_055_can_det_super_res_target_55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_055_can_det_super_res_target_55_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_048.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_048_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_048_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_048.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_048_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_048_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_amplitude_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_amplitude_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_amplitude_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_valid_level_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_valid_level_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_valid_level_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_rate_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_rate_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_rate_48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_scan_index_2_lsb_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_scan_index_2_lsb_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_scan_index_2_lsb_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_range_48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_confid_azimuth_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_confid_azimuth_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_confid_azimuth_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_azimuth_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_azimuth_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_azimuth_48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_host_veh_clutter_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_host_veh_clutter_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_host_veh_clutter_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_nd_target_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_nd_target_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_nd_target_48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_048_can_det_super_res_target_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_048_can_det_super_res_target_48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_048_can_det_super_res_target_48_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_047.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_047_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_047_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_047.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_047_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_047_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_amplitude_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_amplitude_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_amplitude_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_valid_level_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_valid_level_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_valid_level_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_rate_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_rate_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_rate_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_scan_index_2_lsb_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_scan_index_2_lsb_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_scan_index_2_lsb_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_range_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_confid_azimuth_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_confid_azimuth_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_confid_azimuth_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_azimuth_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_azimuth_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_azimuth_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_host_veh_clutter_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_host_veh_clutter_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_host_veh_clutter_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_nd_target_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_nd_target_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_nd_target_47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_047_can_det_super_res_target_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_047_can_det_super_res_target_47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_047_can_det_super_res_target_47_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_046.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_046_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_046_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_046.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_046_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_046_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_amplitude_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_amplitude_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_amplitude_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_valid_level_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_valid_level_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_valid_level_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_rate_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_rate_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_rate_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_scan_index_2_lsb_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_scan_index_2_lsb_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_scan_index_2_lsb_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_range_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_confid_azimuth_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_confid_azimuth_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_confid_azimuth_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_azimuth_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_azimuth_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_azimuth_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_host_veh_clutter_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_host_veh_clutter_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_host_veh_clutter_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_nd_target_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_nd_target_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_nd_target_46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_046_can_det_super_res_target_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_046_can_det_super_res_target_46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_046_can_det_super_res_target_46_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_045.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_045_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_045_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_045.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_045_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_045_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_amplitude_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_amplitude_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_amplitude_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_valid_level_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_valid_level_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_valid_level_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_rate_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_rate_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_rate_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_scan_index_2_lsb_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_scan_index_2_lsb_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_scan_index_2_lsb_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_range_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_confid_azimuth_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_confid_azimuth_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_confid_azimuth_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_azimuth_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_azimuth_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_azimuth_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_host_veh_clutter_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_host_veh_clutter_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_host_veh_clutter_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_nd_target_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_nd_target_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_nd_target_45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_045_can_det_super_res_target_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_045_can_det_super_res_target_45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_045_can_det_super_res_target_45_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_044.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_044_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_044_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_044.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_044_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_044_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_amplitude_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_amplitude_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_amplitude_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_valid_level_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_valid_level_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_valid_level_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_rate_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_rate_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_rate_44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_scan_index_2_lsb_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_scan_index_2_lsb_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_scan_index_2_lsb_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_range_44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_confid_azimuth_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_confid_azimuth_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_confid_azimuth_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_azimuth_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_azimuth_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_azimuth_44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_host_veh_clutter_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_host_veh_clutter_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_host_veh_clutter_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_nd_target_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_nd_target_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_nd_target_44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_044_can_det_super_res_target_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_044_can_det_super_res_target_44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_044_can_det_super_res_target_44_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_043.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_043_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_043_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_043.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_043_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_043_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_amplitude_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_amplitude_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_amplitude_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_valid_level_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_valid_level_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_valid_level_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_rate_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_rate_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_rate_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_scan_index_2_lsb_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_scan_index_2_lsb_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_scan_index_2_lsb_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_range_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_confid_azimuth_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_confid_azimuth_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_confid_azimuth_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_azimuth_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_azimuth_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_azimuth_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_host_veh_clutter_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_host_veh_clutter_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_host_veh_clutter_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_nd_target_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_nd_target_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_nd_target_43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_043_can_det_super_res_target_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_043_can_det_super_res_target_43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_043_can_det_super_res_target_43_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_042.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_042_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_042_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_042.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_042_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_042_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_amplitude_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_amplitude_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_amplitude_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_valid_level_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_valid_level_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_valid_level_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_rate_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_rate_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_rate_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_scan_index_2_lsb_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_scan_index_2_lsb_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_scan_index_2_lsb_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_range_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_confid_azimuth_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_confid_azimuth_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_confid_azimuth_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_azimuth_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_azimuth_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_azimuth_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_host_veh_clutter_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_host_veh_clutter_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_host_veh_clutter_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_nd_target_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_nd_target_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_nd_target_42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_042_can_det_super_res_target_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_042_can_det_super_res_target_42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_042_can_det_super_res_target_42_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_041.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_041_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_041_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_041.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_041_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_041_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_amplitude_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_amplitude_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_amplitude_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_valid_level_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_valid_level_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_valid_level_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_rate_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_rate_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_rate_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_scan_index_2_lsb_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_scan_index_2_lsb_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_scan_index_2_lsb_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_range_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_confid_azimuth_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_confid_azimuth_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_confid_azimuth_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_azimuth_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_azimuth_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_azimuth_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_host_veh_clutter_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_host_veh_clutter_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_host_veh_clutter_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_nd_target_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_nd_target_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_nd_target_41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_041_can_det_super_res_target_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_041_can_det_super_res_target_41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_041_can_det_super_res_target_41_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_040.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_040_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_040_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_040.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_040_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_040_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_amplitude_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_amplitude_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_amplitude_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_valid_level_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_valid_level_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_valid_level_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_rate_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_rate_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_rate_40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_scan_index_2_lsb_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_scan_index_2_lsb_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_scan_index_2_lsb_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_range_40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_confid_azimuth_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_confid_azimuth_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_confid_azimuth_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_azimuth_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_azimuth_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_azimuth_40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_host_veh_clutter_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_host_veh_clutter_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_host_veh_clutter_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_nd_target_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_nd_target_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_nd_target_40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_040_can_det_super_res_target_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_040_can_det_super_res_target_40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_040_can_det_super_res_target_40_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_038.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_038_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_038_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_038.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_038_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_038_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_amplitude_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_amplitude_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_amplitude_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_valid_level_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_valid_level_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_valid_level_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_rate_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_rate_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_rate_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_scan_index_2_lsb_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_scan_index_2_lsb_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_scan_index_2_lsb_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_range_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_confid_azimuth_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_confid_azimuth_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_confid_azimuth_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_azimuth_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_azimuth_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_azimuth_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_host_veh_clutter_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_host_veh_clutter_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_host_veh_clutter_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_nd_target_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_nd_target_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_nd_target_38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_038_can_det_super_res_target_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_038_can_det_super_res_target_38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_038_can_det_super_res_target_38_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_037.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_037_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_037_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_037.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_037_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_037_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_amplitude_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_amplitude_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_amplitude_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_valid_level_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_valid_level_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_valid_level_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_rate_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_rate_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_rate_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_scan_index_2_lsb_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_scan_index_2_lsb_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_scan_index_2_lsb_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_range_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_confid_azimuth_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_confid_azimuth_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_confid_azimuth_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_azimuth_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_azimuth_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_azimuth_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_host_veh_clutter_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_host_veh_clutter_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_host_veh_clutter_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_nd_target_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_nd_target_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_nd_target_37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_037_can_det_super_res_target_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_037_can_det_super_res_target_37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_037_can_det_super_res_target_37_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_036.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_036_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_036_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_036.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_036_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_036_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_amplitude_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_amplitude_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_amplitude_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_valid_level_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_valid_level_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_valid_level_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_rate_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_rate_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_rate_36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_scan_index_2_lsb_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_scan_index_2_lsb_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_scan_index_2_lsb_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_range_36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_confid_azimuth_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_confid_azimuth_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_confid_azimuth_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_azimuth_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_azimuth_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_azimuth_36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_host_veh_clutter_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_host_veh_clutter_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_host_veh_clutter_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_nd_target_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_nd_target_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_nd_target_36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_036_can_det_super_res_target_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_036_can_det_super_res_target_36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_036_can_det_super_res_target_36_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_035.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_035_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_035_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_035.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_035_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_035_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_amplitude_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_amplitude_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_amplitude_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_valid_level_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_valid_level_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_valid_level_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_rate_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_rate_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_rate_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_scan_index_2_lsb_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_scan_index_2_lsb_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_scan_index_2_lsb_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_range_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_confid_azimuth_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_confid_azimuth_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_confid_azimuth_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_azimuth_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_azimuth_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_azimuth_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_host_veh_clutter_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_host_veh_clutter_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_host_veh_clutter_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_nd_target_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_nd_target_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_nd_target_35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_035_can_det_super_res_target_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_035_can_det_super_res_target_35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_035_can_det_super_res_target_35_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_034.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_034_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_034_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_034.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_034_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_034_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_amplitude_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_amplitude_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_amplitude_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_valid_level_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_valid_level_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_valid_level_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_rate_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_rate_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_rate_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_scan_index_2_lsb_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_scan_index_2_lsb_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_scan_index_2_lsb_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_range_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_confid_azimuth_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_confid_azimuth_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_confid_azimuth_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_azimuth_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_azimuth_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_azimuth_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_host_veh_clutter_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_host_veh_clutter_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_host_veh_clutter_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_nd_target_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_nd_target_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_nd_target_34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_034_can_det_super_res_target_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_034_can_det_super_res_target_34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_034_can_det_super_res_target_34_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_033.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_033_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_033_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_033.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_033_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_033_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_amplitude_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_amplitude_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_amplitude_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_valid_level_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_valid_level_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_valid_level_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_rate_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_rate_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_rate_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_scan_index_2_lsb_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_scan_index_2_lsb_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_scan_index_2_lsb_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_range_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_confid_azimuth_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_confid_azimuth_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_confid_azimuth_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_azimuth_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_azimuth_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_azimuth_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_host_veh_clutter_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_host_veh_clutter_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_host_veh_clutter_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_nd_target_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_nd_target_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_nd_target_33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_033_can_det_super_res_target_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_033_can_det_super_res_target_33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_033_can_det_super_res_target_33_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_032.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_032_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_032_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_032.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_032_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_032_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_amplitude_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_amplitude_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_amplitude_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_valid_level_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_valid_level_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_valid_level_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_rate_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_rate_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_rate_32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_scan_index_2_lsb_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_scan_index_2_lsb_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_scan_index_2_lsb_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_range_32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_confid_azimuth_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_confid_azimuth_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_confid_azimuth_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_azimuth_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_azimuth_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_azimuth_32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_host_veh_clutter_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_host_veh_clutter_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_host_veh_clutter_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_nd_target_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_nd_target_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_nd_target_32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_032_can_det_super_res_target_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_032_can_det_super_res_target_32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_032_can_det_super_res_target_32_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_031.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_031_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_031_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_031.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_031_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_031_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_amplitude_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_amplitude_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_amplitude_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_valid_level_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_valid_level_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_valid_level_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_rate_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_rate_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_rate_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_scan_index_2_lsb_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_scan_index_2_lsb_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_scan_index_2_lsb_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_range_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_confid_azimuth_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_confid_azimuth_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_confid_azimuth_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_azimuth_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_azimuth_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_azimuth_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_host_veh_clutter_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_host_veh_clutter_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_host_veh_clutter_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_nd_target_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_nd_target_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_nd_target_31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_031_can_det_super_res_target_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_031_can_det_super_res_target_31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_031_can_det_super_res_target_31_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_030.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_030_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_030_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_030.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_030_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_030_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_amplitude_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_amplitude_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_amplitude_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_valid_level_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_valid_level_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_valid_level_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_rate_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_rate_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_rate_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_scan_index_2_lsb_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_scan_index_2_lsb_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_scan_index_2_lsb_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_range_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_confid_azimuth_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_confid_azimuth_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_confid_azimuth_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_azimuth_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_azimuth_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_azimuth_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_host_veh_clutter_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_host_veh_clutter_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_host_veh_clutter_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_nd_target_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_nd_target_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_nd_target_30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_030_can_det_super_res_target_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_030_can_det_super_res_target_30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_030_can_det_super_res_target_30_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_029.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_029_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_029_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_029.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_029_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_029_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_amplitude_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_amplitude_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_amplitude_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_valid_level_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_valid_level_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_valid_level_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_rate_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_rate_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_rate_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_scan_index_2_lsb_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_scan_index_2_lsb_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_scan_index_2_lsb_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_range_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_confid_azimuth_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_confid_azimuth_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_confid_azimuth_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_azimuth_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_azimuth_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_azimuth_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_host_veh_clutter_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_host_veh_clutter_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_host_veh_clutter_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_nd_target_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_nd_target_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_nd_target_29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_029_can_det_super_res_target_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_029_can_det_super_res_target_29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_029_can_det_super_res_target_29_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_027.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_027_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_027_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_027.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_027_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_027_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_amplitude_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_amplitude_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_amplitude_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_valid_level_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_valid_level_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_valid_level_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_rate_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_rate_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_rate_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_scan_index_2_lsb_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_scan_index_2_lsb_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_scan_index_2_lsb_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_range_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_confid_azimuth_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_confid_azimuth_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_confid_azimuth_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_azimuth_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_azimuth_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_azimuth_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_host_veh_clutter_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_host_veh_clutter_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_host_veh_clutter_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_nd_target_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_nd_target_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_nd_target_27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_027_can_det_super_res_target_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_027_can_det_super_res_target_27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_027_can_det_super_res_target_27_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_026.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_026_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_026_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_026.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_026_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_026_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_amplitude_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_amplitude_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_amplitude_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_valid_level_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_valid_level_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_valid_level_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_rate_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_rate_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_rate_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_scan_index_2_lsb_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_scan_index_2_lsb_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_scan_index_2_lsb_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_range_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_confid_azimuth_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_confid_azimuth_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_confid_azimuth_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_azimuth_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_azimuth_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_azimuth_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_host_veh_clutter_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_host_veh_clutter_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_host_veh_clutter_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_nd_target_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_nd_target_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_nd_target_26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_026_can_det_super_res_target_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_026_can_det_super_res_target_26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_026_can_det_super_res_target_26_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_025.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_025_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_025_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_025.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_025_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_025_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_amplitude_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_amplitude_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_amplitude_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_valid_level_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_valid_level_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_valid_level_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_rate_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_rate_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_rate_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_scan_index_2_lsb_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_scan_index_2_lsb_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_scan_index_2_lsb_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_range_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_confid_azimuth_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_confid_azimuth_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_confid_azimuth_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_azimuth_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_azimuth_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_azimuth_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_host_veh_clutter_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_host_veh_clutter_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_host_veh_clutter_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_nd_target_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_nd_target_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_nd_target_25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_025_can_det_super_res_target_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_025_can_det_super_res_target_25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_025_can_det_super_res_target_25_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_024.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_024_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_024_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_024.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_024_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_024_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_amplitude_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_amplitude_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_amplitude_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_valid_level_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_valid_level_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_valid_level_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_rate_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_rate_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_rate_24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_scan_index_2_lsb_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_scan_index_2_lsb_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_scan_index_2_lsb_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_range_24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_confid_azimuth_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_confid_azimuth_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_confid_azimuth_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_azimuth_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_azimuth_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_azimuth_24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_host_veh_clutter_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_host_veh_clutter_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_host_veh_clutter_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_nd_target_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_nd_target_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_nd_target_24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_024_can_det_super_res_target_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_024_can_det_super_res_target_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_024_can_det_super_res_target_24_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_023.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_023_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_023_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_023.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_023_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_023_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_amplitude_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_amplitude_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_amplitude_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_valid_level_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_valid_level_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_valid_level_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_rate_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_rate_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_rate_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_scan_index_2_lsb_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_scan_index_2_lsb_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_scan_index_2_lsb_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_range_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_confid_azimuth_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_confid_azimuth_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_confid_azimuth_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_azimuth_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_azimuth_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_azimuth_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_host_veh_clutter_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_host_veh_clutter_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_host_veh_clutter_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_nd_target_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_nd_target_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_nd_target_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_023_can_det_super_res_target_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_023_can_det_super_res_target_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_023_can_det_super_res_target_23_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_022.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_022_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_022_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_022.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_022_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_022_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_amplitude_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_amplitude_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_amplitude_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_valid_level_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_valid_level_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_valid_level_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_rate_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_rate_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_rate_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_scan_index_2_lsb_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_scan_index_2_lsb_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_scan_index_2_lsb_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_range_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_confid_azimuth_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_confid_azimuth_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_confid_azimuth_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_azimuth_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_azimuth_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_azimuth_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_host_veh_clutter_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_host_veh_clutter_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_host_veh_clutter_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_nd_target_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_nd_target_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_nd_target_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_022_can_det_super_res_target_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_022_can_det_super_res_target_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_022_can_det_super_res_target_22_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_021.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_021_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_021_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_021.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_021_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_021_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_amplitude_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_amplitude_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_amplitude_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_valid_level_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_valid_level_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_valid_level_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_rate_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_rate_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_rate_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_scan_index_2_lsb_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_scan_index_2_lsb_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_scan_index_2_lsb_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_range_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_confid_azimuth_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_confid_azimuth_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_confid_azimuth_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_azimuth_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_azimuth_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_azimuth_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_host_veh_clutter_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_host_veh_clutter_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_host_veh_clutter_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_nd_target_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_nd_target_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_nd_target_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_021_can_det_super_res_target_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_021_can_det_super_res_target_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_021_can_det_super_res_target_21_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_020.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_020_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_020_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_020.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_020_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_020_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_amplitude_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_amplitude_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_amplitude_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_valid_level_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_valid_level_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_valid_level_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_rate_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_rate_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_rate_20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_scan_index_2_lsb_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_scan_index_2_lsb_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_scan_index_2_lsb_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_range_20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_confid_azimuth_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_confid_azimuth_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_confid_azimuth_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_azimuth_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_azimuth_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_azimuth_20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_host_veh_clutter_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_host_veh_clutter_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_host_veh_clutter_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_nd_target_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_nd_target_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_nd_target_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_020_can_det_super_res_target_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_020_can_det_super_res_target_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_020_can_det_super_res_target_20_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_019.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_019_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_019_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_019.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_019_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_019_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_amplitude_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_amplitude_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_amplitude_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_valid_level_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_valid_level_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_valid_level_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_rate_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_rate_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_rate_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_scan_index_2_lsb_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_scan_index_2_lsb_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_scan_index_2_lsb_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_range_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_confid_azimuth_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_confid_azimuth_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_confid_azimuth_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_azimuth_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_azimuth_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_azimuth_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_host_veh_clutter_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_host_veh_clutter_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_host_veh_clutter_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_nd_target_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_nd_target_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_nd_target_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_019_can_det_super_res_target_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_019_can_det_super_res_target_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_019_can_det_super_res_target_19_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_018.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_018_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_018_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_018.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_018_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_018_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_amplitude_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_amplitude_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_amplitude_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_valid_level_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_valid_level_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_valid_level_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_rate_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_rate_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_rate_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_scan_index_2_lsb_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_scan_index_2_lsb_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_scan_index_2_lsb_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_range_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_confid_azimuth_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_confid_azimuth_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_confid_azimuth_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_azimuth_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_azimuth_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_azimuth_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_host_veh_clutter_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_host_veh_clutter_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_host_veh_clutter_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_nd_target_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_nd_target_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_nd_target_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_018_can_det_super_res_target_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_018_can_det_super_res_target_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_018_can_det_super_res_target_18_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_054.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_054_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_054_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_054.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_054_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_054_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_amplitude_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_amplitude_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_amplitude_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_valid_level_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_valid_level_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_valid_level_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_rate_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_rate_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_rate_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_scan_index_2_lsb_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_scan_index_2_lsb_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_scan_index_2_lsb_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_range_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_confid_azimuth_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_confid_azimuth_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_confid_azimuth_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_azimuth_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_azimuth_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_azimuth_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_host_veh_clutter_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_host_veh_clutter_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_host_veh_clutter_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_nd_target_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_nd_target_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_nd_target_54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_054_can_det_super_res_target_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_054_can_det_super_res_target_54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_054_can_det_super_res_target_54_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_053.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_053_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_053_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_053.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_053_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_053_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_amplitude_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_amplitude_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_amplitude_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_valid_level_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_valid_level_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_valid_level_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_rate_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_rate_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_rate_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_scan_index_2_lsb_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_scan_index_2_lsb_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_scan_index_2_lsb_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_range_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_confid_azimuth_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_confid_azimuth_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_confid_azimuth_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_azimuth_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_azimuth_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_azimuth_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_host_veh_clutter_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_host_veh_clutter_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_host_veh_clutter_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_nd_target_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_nd_target_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_nd_target_53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_053_can_det_super_res_target_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_053_can_det_super_res_target_53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_053_can_det_super_res_target_53_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_052.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_052_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_052_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_052.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_052_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_052_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_amplitude_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_amplitude_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_amplitude_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_valid_level_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_valid_level_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_valid_level_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_rate_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_rate_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_rate_52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_scan_index_2_lsb_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_scan_index_2_lsb_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_scan_index_2_lsb_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_range_52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_confid_azimuth_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_confid_azimuth_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_confid_azimuth_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_azimuth_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_azimuth_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_azimuth_52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_host_veh_clutter_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_host_veh_clutter_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_host_veh_clutter_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_nd_target_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_nd_target_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_nd_target_52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_052_can_det_super_res_target_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_052_can_det_super_res_target_52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_052_can_det_super_res_target_52_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_051.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_051_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_051_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_051.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_051_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_051_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_amplitude_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_amplitude_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_amplitude_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_valid_level_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_valid_level_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_valid_level_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_rate_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_rate_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_rate_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_scan_index_2_lsb_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_scan_index_2_lsb_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_scan_index_2_lsb_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_range_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_confid_azimuth_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_confid_azimuth_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_confid_azimuth_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_azimuth_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_azimuth_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_azimuth_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_host_veh_clutter_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_host_veh_clutter_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_host_veh_clutter_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_nd_target_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_nd_target_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_nd_target_51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_051_can_det_super_res_target_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_051_can_det_super_res_target_51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_051_can_det_super_res_target_51_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_050.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_050_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_050_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_050.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_050_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_050_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_amplitude_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_amplitude_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_amplitude_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_valid_level_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_valid_level_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_valid_level_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_rate_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_rate_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_rate_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_scan_index_2_lsb_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_scan_index_2_lsb_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_scan_index_2_lsb_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_range_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_confid_azimuth_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_confid_azimuth_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_confid_azimuth_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_azimuth_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_azimuth_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_azimuth_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_host_veh_clutter_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_host_veh_clutter_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_host_veh_clutter_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_nd_target_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_nd_target_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_nd_target_50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_050_can_det_super_res_target_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_050_can_det_super_res_target_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_050_can_det_super_res_target_50_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_049.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_049_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_049_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_049.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_049_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_049_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_amplitude_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_amplitude_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_amplitude_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_valid_level_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_valid_level_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_valid_level_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_rate_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_rate_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_rate_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_scan_index_2_lsb_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_scan_index_2_lsb_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_scan_index_2_lsb_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_range_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_confid_azimuth_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_confid_azimuth_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_confid_azimuth_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_azimuth_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_azimuth_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_azimuth_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_host_veh_clutter_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_host_veh_clutter_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_host_veh_clutter_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_nd_target_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_nd_target_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_nd_target_49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_049_can_det_super_res_target_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_049_can_det_super_res_target_49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_049_can_det_super_res_target_49_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_039.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_039_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_039_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_039.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_039_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_039_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_amplitude_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_amplitude_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_amplitude_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_valid_level_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_valid_level_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_valid_level_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_rate_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_rate_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_rate_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_scan_index_2_lsb_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_scan_index_2_lsb_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_scan_index_2_lsb_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_range_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_confid_azimuth_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_confid_azimuth_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_confid_azimuth_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_azimuth_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_azimuth_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_azimuth_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_host_veh_clutter_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_host_veh_clutter_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_host_veh_clutter_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_nd_target_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_nd_target_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_nd_target_39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_039_can_det_super_res_target_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_039_can_det_super_res_target_39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_039_can_det_super_res_target_39_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_028.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_028_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_028_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_028.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_028_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_028_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_amplitude_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_amplitude_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_amplitude_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_valid_level_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_valid_level_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_valid_level_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_rate_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_rate_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_rate_28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_scan_index_2_lsb_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_scan_index_2_lsb_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_scan_index_2_lsb_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_range_28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_confid_azimuth_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_confid_azimuth_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_confid_azimuth_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_azimuth_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_azimuth_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_azimuth_28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_host_veh_clutter_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_host_veh_clutter_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_host_veh_clutter_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_nd_target_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_nd_target_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_nd_target_28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_028_can_det_super_res_target_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_028_can_det_super_res_target_28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_028_can_det_super_res_target_28_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_017.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_017_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_017_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_017.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_017_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_017_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_amplitude_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_amplitude_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_amplitude_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_valid_level_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_valid_level_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_valid_level_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_rate_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_rate_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_rate_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_scan_index_2_lsb_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_scan_index_2_lsb_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_scan_index_2_lsb_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_range_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_confid_azimuth_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_confid_azimuth_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_confid_azimuth_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_azimuth_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_azimuth_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_azimuth_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_host_veh_clutter_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_host_veh_clutter_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_host_veh_clutter_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_nd_target_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_nd_target_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_nd_target_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_017_can_det_super_res_target_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_017_can_det_super_res_target_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_017_can_det_super_res_target_17_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_016.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_016_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_016_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_016.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_016_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_016_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_amplitude_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_amplitude_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_amplitude_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_valid_level_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_valid_level_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_valid_level_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_rate_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_rate_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_rate_16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_scan_index_2_lsb_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_scan_index_2_lsb_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_scan_index_2_lsb_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_range_16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_confid_azimuth_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_confid_azimuth_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_confid_azimuth_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_azimuth_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_azimuth_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_azimuth_16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_host_veh_clutter_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_host_veh_clutter_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_host_veh_clutter_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_nd_target_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_nd_target_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_nd_target_16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_016_can_det_super_res_target_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_016_can_det_super_res_target_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_016_can_det_super_res_target_16_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_015.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_015_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_015_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_015.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_015_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_015_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_amplitude_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_amplitude_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_amplitude_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_valid_level_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_valid_level_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_valid_level_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_rate_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_rate_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_rate_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_scan_index_2_lsb_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_scan_index_2_lsb_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_scan_index_2_lsb_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_range_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_confid_azimuth_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_confid_azimuth_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_confid_azimuth_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_azimuth_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_azimuth_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_azimuth_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_host_veh_clutter_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_host_veh_clutter_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_host_veh_clutter_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_nd_target_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_nd_target_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_nd_target_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_015_can_det_super_res_target_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_015_can_det_super_res_target_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_015_can_det_super_res_target_15_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_014.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_014_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_014_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_014.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_014_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_014_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_amplitude_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_amplitude_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_amplitude_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_valid_level_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_valid_level_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_valid_level_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_rate_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_rate_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_rate_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_scan_index_2_lsb_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_scan_index_2_lsb_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_scan_index_2_lsb_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_range_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_confid_azimuth_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_confid_azimuth_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_confid_azimuth_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_azimuth_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_azimuth_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_azimuth_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_host_veh_clutter_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_host_veh_clutter_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_host_veh_clutter_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_nd_target_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_nd_target_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_nd_target_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_014_can_det_super_res_target_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_014_can_det_super_res_target_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_014_can_det_super_res_target_14_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_013.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_013_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_013_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_013.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_013_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_013_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_amplitude_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_amplitude_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_amplitude_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_valid_level_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_valid_level_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_valid_level_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_rate_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_rate_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_rate_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_scan_index_2_lsb_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_scan_index_2_lsb_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_scan_index_2_lsb_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_range_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_confid_azimuth_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_confid_azimuth_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_confid_azimuth_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_azimuth_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_azimuth_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_azimuth_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_host_veh_clutter_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_host_veh_clutter_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_host_veh_clutter_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_nd_target_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_nd_target_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_nd_target_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_013_can_det_super_res_target_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_013_can_det_super_res_target_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_013_can_det_super_res_target_13_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_012.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_012_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_012_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_012.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_012_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_012_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_amplitude_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_amplitude_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_amplitude_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_valid_level_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_valid_level_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_valid_level_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_rate_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_rate_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_rate_12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_scan_index_2_lsb_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_scan_index_2_lsb_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_scan_index_2_lsb_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_range_12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_confid_azimuth_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_confid_azimuth_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_confid_azimuth_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_azimuth_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_azimuth_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_azimuth_12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_host_veh_clutter_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_host_veh_clutter_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_host_veh_clutter_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_nd_target_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_nd_target_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_nd_target_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_012_can_det_super_res_target_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_012_can_det_super_res_target_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_012_can_det_super_res_target_12_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_011.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_011_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_011_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_011.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_011_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_011_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_amplitude_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_amplitude_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_amplitude_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_valid_level_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_valid_level_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_valid_level_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_rate_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_rate_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_rate_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_scan_index_2_lsb_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_scan_index_2_lsb_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_scan_index_2_lsb_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_range_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_confid_azimuth_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_confid_azimuth_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_confid_azimuth_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_azimuth_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_azimuth_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_azimuth_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_host_veh_clutter_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_host_veh_clutter_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_host_veh_clutter_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_nd_target_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_nd_target_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_nd_target_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_011_can_det_super_res_target_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_011_can_det_super_res_target_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_011_can_det_super_res_target_11_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_010.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_010_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_010_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_010.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_010_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_010_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_amplitude_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_amplitude_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_amplitude_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_valid_level_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_valid_level_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_valid_level_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_rate_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_rate_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_rate_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_scan_index_2_lsb_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_scan_index_2_lsb_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_scan_index_2_lsb_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_range_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_confid_azimuth_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_confid_azimuth_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_confid_azimuth_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_azimuth_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_azimuth_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_azimuth_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_host_veh_clutter_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_host_veh_clutter_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_host_veh_clutter_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_nd_target_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_nd_target_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_nd_target_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_010_can_det_super_res_target_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_010_can_det_super_res_target_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_010_can_det_super_res_target_10_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_009.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_009_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_009_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_009.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_009_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_009_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_amplitude_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_amplitude_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_amplitude_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_valid_level_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_valid_level_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_valid_level_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_rate_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_rate_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_rate_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_scan_index_2_lsb_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_scan_index_2_lsb_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_scan_index_2_lsb_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_range_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_confid_azimuth_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_confid_azimuth_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_confid_azimuth_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_azimuth_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_azimuth_09_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_azimuth_09_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_host_veh_clutter_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_host_veh_clutter_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_host_veh_clutter_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_nd_target_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_nd_target_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_nd_target_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_009_can_det_super_res_target_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_009_can_det_super_res_target_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_009_can_det_super_res_target_09_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_008.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_008_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_008_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_008.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_008_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_008_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_amplitude_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_amplitude_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_amplitude_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_valid_level_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_valid_level_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_valid_level_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_rate_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_rate_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_rate_08_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_scan_index_2_lsb_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_scan_index_2_lsb_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_scan_index_2_lsb_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_range_08_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_confid_azimuth_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_confid_azimuth_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_confid_azimuth_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_azimuth_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_azimuth_08_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_azimuth_08_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_host_veh_clutter_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_host_veh_clutter_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_host_veh_clutter_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_nd_target_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_nd_target_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_nd_target_08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_008_can_det_super_res_target_08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_008_can_det_super_res_target_08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_008_can_det_super_res_target_08_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_007.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_007_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_007_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_007.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_007_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_007_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_amplitude_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_amplitude_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_amplitude_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_valid_level_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_valid_level_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_valid_level_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_rate_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_rate_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_rate_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_scan_index_2_lsb_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_scan_index_2_lsb_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_scan_index_2_lsb_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_range_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_confid_azimuth_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_confid_azimuth_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_confid_azimuth_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_azimuth_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_azimuth_07_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_azimuth_07_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_host_veh_clutter_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_host_veh_clutter_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_host_veh_clutter_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_nd_target_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_nd_target_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_nd_target_07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_007_can_det_super_res_target_07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_007_can_det_super_res_target_07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_007_can_det_super_res_target_07_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_006.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_006_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_006_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_006.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_006_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_006_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_amplitude_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_amplitude_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_amplitude_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_valid_level_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_valid_level_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_valid_level_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_rate_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_rate_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_rate_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_scan_index_2_lsb_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_scan_index_2_lsb_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_scan_index_2_lsb_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_range_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_confid_azimuth_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_confid_azimuth_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_confid_azimuth_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_azimuth_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_azimuth_06_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_azimuth_06_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_host_veh_clutter_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_host_veh_clutter_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_host_veh_clutter_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_nd_target_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_nd_target_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_nd_target_06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_006_can_det_super_res_target_06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_006_can_det_super_res_target_06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_006_can_det_super_res_target_06_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_005.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_005_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_005_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_005.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_005_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_005_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_amplitude_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_amplitude_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_amplitude_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_valid_level_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_valid_level_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_valid_level_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_rate_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_rate_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_rate_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_scan_index_2_lsb_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_scan_index_2_lsb_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_scan_index_2_lsb_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_range_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_confid_azimuth_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_confid_azimuth_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_confid_azimuth_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_azimuth_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_azimuth_05_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_azimuth_05_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_host_veh_clutter_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_host_veh_clutter_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_host_veh_clutter_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_nd_target_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_nd_target_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_nd_target_05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_005_can_det_super_res_target_05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_005_can_det_super_res_target_05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_005_can_det_super_res_target_05_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_003.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_003_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_003_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_003.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_003_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_003_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_amplitude_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_amplitude_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_amplitude_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_valid_level_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_valid_level_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_valid_level_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_rate_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_rate_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_rate_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_scan_index_2_lsb_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_scan_index_2_lsb_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_scan_index_2_lsb_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_range_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_confid_azimuth_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_confid_azimuth_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_confid_azimuth_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_azimuth_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_azimuth_03_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_azimuth_03_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_host_veh_clutter_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_host_veh_clutter_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_host_veh_clutter_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_nd_target_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_nd_target_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_nd_target_03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_003_can_det_super_res_target_03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_003_can_det_super_res_target_03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_003_can_det_super_res_target_03_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_002.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_002_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_002_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_002.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_002_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_002_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_amplitude_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_amplitude_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_amplitude_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_valid_level_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_valid_level_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_valid_level_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_rate_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_rate_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_rate_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_scan_index_2_lsb_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_scan_index_2_lsb_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_scan_index_2_lsb_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_range_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_confid_azimuth_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_confid_azimuth_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_confid_azimuth_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_azimuth_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_azimuth_02_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_azimuth_02_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_host_veh_clutter_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_host_veh_clutter_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_host_veh_clutter_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_nd_target_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_nd_target_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_nd_target_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_002_can_det_super_res_target_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_002_can_det_super_res_target_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_002_can_det_super_res_target_02_is_in_range(uint8_t value);

/**
 * Pack message MRR_Status_CANVersion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_can_version_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_status_can_version_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Status_CANVersion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_can_version_unpack(
    struct mrr_pcan_core_v07_02_mrr_status_can_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_minor_mrr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_minor_mrr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_minor_mrr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_major_mrr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_major_mrr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_can_version_can_pcan_major_mrr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_status_can_version_can_usc_section_compatibility_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_can_version_can_usc_section_compatibility_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_can_version_can_usc_section_compatibility_is_in_range(uint16_t value);

/**
 * Pack message MRR_Status_Radar.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_radar_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_status_radar_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Status_Radar.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_status_radar_unpack(
    struct mrr_pcan_core_v07_02_mrr_status_radar_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_xcvr_operational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_xcvr_operational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_xcvr_operational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_not_op_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_not_op_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_not_op_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_mnr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_mnr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_mnr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_overheat_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_overheat_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_overheat_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_out_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_out_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_out_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_ext_cond_nok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_ext_cond_nok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_ext_cond_nok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_not_start_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_not_start_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_not_start_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_filter_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_filter_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_blockage_sidelobe_filter_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_interference_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_interference_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_interference_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_recommend_unconverge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_recommend_unconverge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_recommend_unconverge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_incomplete_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_incomplete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_status_radar_can_radar_align_incomplete_is_in_range(uint8_t value);

/**
 * Pack message MRR_Detection_001.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_001_pack(
    uint8_t *dst_p,
    const struct mrr_pcan_core_v07_02_mrr_detection_001_t *src_p,
    size_t size);

/**
 * Unpack message MRR_Detection_001.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mrr_pcan_core_v07_02_mrr_detection_001_unpack(
    struct mrr_pcan_core_v07_02_mrr_detection_001_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_amplitude_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_amplitude_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_amplitude_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_valid_level_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_valid_level_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_valid_level_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_rate_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_rate_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_rate_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_scan_index_2_lsb_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_scan_index_2_lsb_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_scan_index_2_lsb_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_range_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_confid_azimuth_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_confid_azimuth_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_confid_azimuth_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_azimuth_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_azimuth_01_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_azimuth_01_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_host_veh_clutter_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_host_veh_clutter_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_host_veh_clutter_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_nd_target_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_nd_target_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_nd_target_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mrr_pcan_core_v07_02_mrr_detection_001_can_det_super_res_target_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mrr_pcan_core_v07_02_mrr_detection_001_can_det_super_res_target_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mrr_pcan_core_v07_02_mrr_detection_001_can_det_super_res_target_01_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif

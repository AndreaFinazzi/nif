//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the avt_vimba_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __avt_vimba_camera__AVTVIMBACAMERACONFIG_H__
#define __avt_vimba_camera__AVTVIMBACAMERACONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#if 0   // np
#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>
#endif  // 0 np

namespace avt_vimba_camera
{
  class AvtVimbaCameraConfigStatics;

  class AvtVimbaCameraConfig
  {
  public:
#if 0 // np
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const AvtVimbaCameraConfig &config1, const AvtVimbaCameraConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, AvtVimbaCameraConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const AvtVimbaCameraConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AvtVimbaCameraConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const AvtVimbaCameraConfig &config) const = 0;
      virtual void getValue(const AvtVimbaCameraConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T AvtVimbaCameraConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T AvtVimbaCameraConfig::* field;

      virtual void clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const AvtVimbaCameraConfig &config1, const AvtVimbaCameraConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, AvtVimbaCameraConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const AvtVimbaCameraConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AvtVimbaCameraConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const AvtVimbaCameraConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const AvtVimbaCameraConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, AvtVimbaCameraConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, AvtVimbaCameraConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(AvtVimbaCameraConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("frame_id"==(*_i)->name){frame_id = boost::any_cast<std::string>(val);}
        if("trig_timestamp_topic"==(*_i)->name){trig_timestamp_topic = boost::any_cast<std::string>(val);}
        if("acquisition_mode"==(*_i)->name){acquisition_mode = boost::any_cast<std::string>(val);}
        if("acquisition_rate"==(*_i)->name){acquisition_rate = boost::any_cast<double>(val);}
        if("trigger_source"==(*_i)->name){trigger_source = boost::any_cast<std::string>(val);}
        if("trigger_mode"==(*_i)->name){trigger_mode = boost::any_cast<std::string>(val);}
        if("trigger_selector"==(*_i)->name){trigger_selector = boost::any_cast<std::string>(val);}
        if("trigger_activation"==(*_i)->name){trigger_activation = boost::any_cast<std::string>(val);}
        if("trigger_delay"==(*_i)->name){trigger_delay = boost::any_cast<double>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<double>(val);}
        if("exposure_auto"==(*_i)->name){exposure_auto = boost::any_cast<std::string>(val);}
        if("exposure_auto_alg"==(*_i)->name){exposure_auto_alg = boost::any_cast<std::string>(val);}
        if("exposure_auto_tol"==(*_i)->name){exposure_auto_tol = boost::any_cast<int>(val);}
        if("exposure_auto_max"==(*_i)->name){exposure_auto_max = boost::any_cast<int>(val);}
        if("exposure_auto_min"==(*_i)->name){exposure_auto_min = boost::any_cast<int>(val);}
        if("exposure_auto_outliers"==(*_i)->name){exposure_auto_outliers = boost::any_cast<int>(val);}
        if("exposure_auto_rate"==(*_i)->name){exposure_auto_rate = boost::any_cast<int>(val);}
        if("exposure_auto_target"==(*_i)->name){exposure_auto_target = boost::any_cast<int>(val);}
        if("gain"==(*_i)->name){gain = boost::any_cast<double>(val);}
        if("gain_auto"==(*_i)->name){gain_auto = boost::any_cast<std::string>(val);}
        if("gain_auto_tol"==(*_i)->name){gain_auto_tol = boost::any_cast<int>(val);}
        if("gain_auto_max"==(*_i)->name){gain_auto_max = boost::any_cast<double>(val);}
        if("gain_auto_min"==(*_i)->name){gain_auto_min = boost::any_cast<double>(val);}
        if("gain_auto_outliers"==(*_i)->name){gain_auto_outliers = boost::any_cast<int>(val);}
        if("gain_auto_rate"==(*_i)->name){gain_auto_rate = boost::any_cast<int>(val);}
        if("gain_auto_target"==(*_i)->name){gain_auto_target = boost::any_cast<int>(val);}
        if("balance_ratio_abs"==(*_i)->name){balance_ratio_abs = boost::any_cast<double>(val);}
        if("balance_ratio_selector"==(*_i)->name){balance_ratio_selector = boost::any_cast<std::string>(val);}
        if("whitebalance_auto"==(*_i)->name){whitebalance_auto = boost::any_cast<std::string>(val);}
        if("whitebalance_auto_tol"==(*_i)->name){whitebalance_auto_tol = boost::any_cast<int>(val);}
        if("whitebalance_auto_rate"==(*_i)->name){whitebalance_auto_rate = boost::any_cast<int>(val);}
        if("binning_x"==(*_i)->name){binning_x = boost::any_cast<int>(val);}
        if("binning_y"==(*_i)->name){binning_y = boost::any_cast<int>(val);}
        if("decimation_x"==(*_i)->name){decimation_x = boost::any_cast<int>(val);}
        if("decimation_y"==(*_i)->name){decimation_y = boost::any_cast<int>(val);}
        if("width"==(*_i)->name){width = boost::any_cast<int>(val);}
        if("height"==(*_i)->name){height = boost::any_cast<int>(val);}
        if("roi_width"==(*_i)->name){roi_width = boost::any_cast<int>(val);}
        if("roi_height"==(*_i)->name){roi_height = boost::any_cast<int>(val);}
        if("roi_offset_x"==(*_i)->name){roi_offset_x = boost::any_cast<int>(val);}
        if("roi_offset_y"==(*_i)->name){roi_offset_y = boost::any_cast<int>(val);}
        if("pixel_format"==(*_i)->name){pixel_format = boost::any_cast<std::string>(val);}
        if("stream_bytes_per_second"==(*_i)->name){stream_bytes_per_second = boost::any_cast<int>(val);}
        if("ptp_mode"==(*_i)->name){ptp_mode = boost::any_cast<std::string>(val);}
        if("sync_in_selector"==(*_i)->name){sync_in_selector = boost::any_cast<std::string>(val);}
        if("sync_out_polarity"==(*_i)->name){sync_out_polarity = boost::any_cast<std::string>(val);}
        if("sync_out_selector"==(*_i)->name){sync_out_selector = boost::any_cast<std::string>(val);}
        if("sync_out_source"==(*_i)->name){sync_out_source = boost::any_cast<std::string>(val);}
        if("iris_auto_target"==(*_i)->name){iris_auto_target = boost::any_cast<int>(val);}
        if("iris_mode"==(*_i)->name){iris_mode = boost::any_cast<std::string>(val);}
        if("iris_video_level_min"==(*_i)->name){iris_video_level_min = boost::any_cast<int>(val);}
        if("iris_video_level_max"==(*_i)->name){iris_video_level_max = boost::any_cast<int>(val);}
        if("use_ros_timestamp"==(*_i)->name){use_ros_timestamp = boost::any_cast<std::string>(val);}
      }
    }

    std::string frame_id;
    std::string trig_timestamp_topic;
    std::string acquisition_mode;
    double acquisition_rate;
    std::string trigger_source;
    std::string trigger_mode;
    std::string trigger_selector;
    std::string trigger_activation;
    double trigger_delay;
    double exposure;
    std::string exposure_auto;
    std::string exposure_auto_alg;
    int exposure_auto_tol;
    int exposure_auto_max;
    int exposure_auto_min;
    int exposure_auto_outliers;
    int exposure_auto_rate;
    int exposure_auto_target;
    double gain;
    std::string gain_auto;
    int gain_auto_tol;
    double gain_auto_max;
    double gain_auto_min;
    int gain_auto_outliers;
    int gain_auto_rate;
    int gain_auto_target;
    double balance_ratio_abs;
    std::string balance_ratio_selector;
    std::string whitebalance_auto;
    int whitebalance_auto_tol;
    int whitebalance_auto_rate;
    int binning_x;
    int binning_y;
    int decimation_x;
    int decimation_y;
    int width;
    int height;
    int roi_width;
    int roi_height;
    int roi_offset_x;
    int roi_offset_y;
    std::string pixel_format;
    int stream_bytes_per_second;
    std::string ptp_mode;
    std::string sync_in_selector;
    std::string sync_out_polarity;
    std::string sync_out_selector;
    std::string sync_out_source;
    int iris_auto_target;
    std::string iris_mode;
    int iris_video_level_min;
    int iris_video_level_max;
    bool state;
    std::string name;    
}groups;
#endif // np

    std::string frame_id_;
    std::string camera_ip_addr;
    std::string trig_timestamp_topic;
    std::string acquisition_mode;
    double acquisition_rate;
    std::string trigger_source;
    std::string trigger_mode;
    std::string trigger_selector;
    std::string trigger_activation;
    double trigger_delay;
    double exposure;
    std::string exposure_auto;
    std::string exposure_auto_alg;
    int exposure_auto_tol;
    int exposure_auto_max;
    int exposure_auto_min;
    int exposure_auto_outliers;
    int exposure_auto_rate;
    int exposure_auto_target;
    double gain;
    std::string gain_auto;
    int gain_auto_tol;
    double gain_auto_max;
    double gain_auto_min;
    int gain_auto_outliers;
    int gain_auto_rate;
    int gain_auto_target;
    double balance_ratio_abs;
    std::string balance_ratio_selector;
    std::string whitebalance_auto;
    int whitebalance_auto_tol;
    int whitebalance_auto_rate;
    int binning_x;
    int binning_y;
    int decimation_x;
    int decimation_y;
    int width;
    int height;
    int roi_width;
    int roi_height;
    int roi_offset_x;
    int roi_offset_y;
    std::string pixel_format;
    int stream_bytes_per_second;
    std::string ptp_mode;
    std::string sync_in_selector;
    std::string sync_out_polarity;
    std::string sync_out_selector;
    std::string sync_out_source;
    int iris_auto_target;
    std::string iris_mode;
    int iris_video_level_min;
    int iris_video_level_max;
    std::string use_ros_timestamp;

#if 0 // np
    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("AvtVimbaCameraConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const AvtVimbaCameraConfig &__max__ = __getMax__();
      const AvtVimbaCameraConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const AvtVimbaCameraConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const AvtVimbaCameraConfig &__getDefault__();
    static const AvtVimbaCameraConfig &__getMax__();
    static const AvtVimbaCameraConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const AvtVimbaCameraConfigStatics *__get_statics__();
#endif      // np
  };
  
#if 0 // np
  template <> // Max and min are ignored for strings.
  inline void AvtVimbaCameraConfig::ParamDescription<std::string>::clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class AvtVimbaCameraConfigStatics
  {
    friend class AvtVimbaCameraConfig;

    AvtVimbaCameraConfigStatics()
    {
AvtVimbaCameraConfig::GroupDescription<AvtVimbaCameraConfig::DEFAULT, AvtVimbaCameraConfig> Default("Default", "", 0, 0, true, &AvtVimbaCameraConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_id = "";
      __max__.frame_id = "";
      __default__.frame_id = "camera";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera TF frame set in message headers.", "", &AvtVimbaCameraConfig::frame_id)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera TF frame set in message headers.", "", &AvtVimbaCameraConfig::frame_id)));
      __min__.trig_timestamp_topic = "";
      __max__.trig_timestamp_topic = "";
      __default__.trig_timestamp_topic = "";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trig_timestamp_topic", "str", 1, "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "", &AvtVimbaCameraConfig::trig_timestamp_topic)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trig_timestamp_topic", "str", 1, "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "", &AvtVimbaCameraConfig::trig_timestamp_topic)));
      __min__.acquisition_mode = "";
      __max__.acquisition_mode = "";
      __default__.acquisition_mode = "Continuous";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("acquisition_mode", "str", 1, "Camera acquisition mode", "{'enum': [{'name': 'Continuous', 'type': 'str', 'value': 'Continuous', 'srcline': 30, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'After an acquisition start event, the camera will continuously receive frame trigger events.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SingleFrame', 'type': 'str', 'value': 'SingleFrame', 'srcline': 31, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will only deliver a single frame trigger event', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'MultiFrame', 'type': 'str', 'value': 'MultiFrame', 'srcline': 32, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Recorder', 'type': 'str', 'value': 'Recorder', 'srcline': 33, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will continuously record images into the camera on-board memory', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::acquisition_mode)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("acquisition_mode", "str", 1, "Camera acquisition mode", "{'enum': [{'name': 'Continuous', 'type': 'str', 'value': 'Continuous', 'srcline': 30, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'After an acquisition start event, the camera will continuously receive frame trigger events.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SingleFrame', 'type': 'str', 'value': 'SingleFrame', 'srcline': 31, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will only deliver a single frame trigger event', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'MultiFrame', 'type': 'str', 'value': 'MultiFrame', 'srcline': 32, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Recorder', 'type': 'str', 'value': 'Recorder', 'srcline': 33, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will continuously record images into the camera on-board memory', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::acquisition_mode)));
      __min__.acquisition_rate = 1.0;
      __max__.acquisition_rate = 30.0;
      __default__.acquisition_rate = 2.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("acquisition_rate", "double", 0, "Sets the expected triggering rate in externally triggered mode.", "", &AvtVimbaCameraConfig::acquisition_rate)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("acquisition_rate", "double", 0, "Sets the expected triggering rate in externally triggered mode.", "", &AvtVimbaCameraConfig::acquisition_rate)));
      __min__.trigger_source = "";
      __max__.trigger_source = "";
      __default__.trigger_source = "FixedRate";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_source", "str", 1, "Camera trigger source", "{'enum': [{'name': 'Freerun', 'type': 'str', 'value': 'Freerun', 'srcline': 12, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Run at maximum frame rate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line1', 'type': 'str', 'value': 'Line1', 'srcline': 13, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn1 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line2', 'type': 'str', 'value': 'Line2', 'srcline': 14, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn2 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line3', 'type': 'str', 'value': 'Line3', 'srcline': 15, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn3 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line4', 'type': 'str', 'value': 'Line4', 'srcline': 16, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn4 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FixedRate', 'type': 'str', 'value': 'FixedRate', 'srcline': 17, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Software', 'type': 'str', 'value': 'Software', 'srcline': 18, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Software inititated image capture', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::trigger_source)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_source", "str", 1, "Camera trigger source", "{'enum': [{'name': 'Freerun', 'type': 'str', 'value': 'Freerun', 'srcline': 12, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Run at maximum frame rate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line1', 'type': 'str', 'value': 'Line1', 'srcline': 13, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn1 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line2', 'type': 'str', 'value': 'Line2', 'srcline': 14, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn2 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line3', 'type': 'str', 'value': 'Line3', 'srcline': 15, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn3 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line4', 'type': 'str', 'value': 'Line4', 'srcline': 16, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn4 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FixedRate', 'type': 'str', 'value': 'FixedRate', 'srcline': 17, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Software', 'type': 'str', 'value': 'Software', 'srcline': 18, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Software inititated image capture', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::trigger_source)));
      __min__.trigger_mode = "";
      __max__.trigger_mode = "";
      __default__.trigger_mode = "On";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_mode", "str", 1, "Camera trigger mode", "{'enum': [{'name': 'ModeOn', 'type': 'str', 'value': 'On', 'srcline': 24, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'ModeOff', 'type': 'str', 'value': 'Off', 'srcline': 25, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger mode'}", &AvtVimbaCameraConfig::trigger_mode)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_mode", "str", 1, "Camera trigger mode", "{'enum': [{'name': 'ModeOn', 'type': 'str', 'value': 'On', 'srcline': 24, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'ModeOff', 'type': 'str', 'value': 'Off', 'srcline': 25, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger mode'}", &AvtVimbaCameraConfig::trigger_mode)));
      __min__.trigger_selector = "";
      __max__.trigger_selector = "";
      __default__.trigger_selector = "FrameStart";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_selector", "str", 1, "Camera trigger selector", "{'enum': [{'name': 'FrameStart', 'type': 'str', 'value': 'FrameStart', 'srcline': 26, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionStart', 'type': 'str', 'value': 'AcquisitionStart', 'srcline': 27, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionEnd', 'type': 'str', 'value': 'AcquisitionEnd', 'srcline': 28, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionRecord', 'type': 'str', 'value': 'AcquisitionRecord', 'srcline': 29, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger activation selector'}", &AvtVimbaCameraConfig::trigger_selector)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_selector", "str", 1, "Camera trigger selector", "{'enum': [{'name': 'FrameStart', 'type': 'str', 'value': 'FrameStart', 'srcline': 26, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionStart', 'type': 'str', 'value': 'AcquisitionStart', 'srcline': 27, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionEnd', 'type': 'str', 'value': 'AcquisitionEnd', 'srcline': 28, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionRecord', 'type': 'str', 'value': 'AcquisitionRecord', 'srcline': 29, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger activation selector'}", &AvtVimbaCameraConfig::trigger_selector)));
      __min__.trigger_activation = "";
      __max__.trigger_activation = "";
      __default__.trigger_activation = "RisingEdge";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_activation", "str", 1, "Camera trigger activation", "{'enum': [{'name': 'RisingEdge', 'type': 'str', 'value': 'RisingEdge', 'srcline': 19, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FallingEdge', 'type': 'str', 'value': 'FallingEdge', 'srcline': 20, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AnyEdge', 'type': 'str', 'value': 'AnyEdge', 'srcline': 21, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelHigh', 'type': 'str', 'value': 'LevelHigh', 'srcline': 22, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelLow', 'type': 'str', 'value': 'LevelLow', 'srcline': 23, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::trigger_activation)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_activation", "str", 1, "Camera trigger activation", "{'enum': [{'name': 'RisingEdge', 'type': 'str', 'value': 'RisingEdge', 'srcline': 19, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FallingEdge', 'type': 'str', 'value': 'FallingEdge', 'srcline': 20, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AnyEdge', 'type': 'str', 'value': 'AnyEdge', 'srcline': 21, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelHigh', 'type': 'str', 'value': 'LevelHigh', 'srcline': 22, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelLow', 'type': 'str', 'value': 'LevelLow', 'srcline': 23, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::trigger_activation)));
      __min__.trigger_delay = 0.0;
      __max__.trigger_delay = 60000000.0;
      __default__.trigger_delay = 0.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("trigger_delay", "double", 0, "Trigger delay in us (only valid when set to external trigger)", "", &AvtVimbaCameraConfig::trigger_delay)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("trigger_delay", "double", 0, "Trigger delay in us (only valid when set to external trigger)", "", &AvtVimbaCameraConfig::trigger_delay)));
      __min__.exposure = 41.0;
      __max__.exposure = 60000000.0;
      __default__.exposure = 50000.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure", "double", 0, "Camera exposure time in microseconds.", "", &AvtVimbaCameraConfig::exposure)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure", "double", 0, "Camera exposure time in microseconds.", "", &AvtVimbaCameraConfig::exposure)));
      __min__.exposure_auto = "";
      __max__.exposure_auto = "";
      __default__.exposure_auto = "Continuous";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::exposure_auto)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::exposure_auto)));
      __min__.exposure_auto_alg = "";
      __max__.exposure_auto_alg = "";
      __default__.exposure_auto_alg = "FitRange";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto_alg", "str", 0, "The following algorithms can be used to calculate auto exposure", "{'enum': [{'name': 'Mean', 'type': 'str', 'value': 'Mean', 'srcline': 96, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] The arithmetic mean of the histogram of the current image is compared to ExposureAutoTarget, and the next image adjusted in exposure time to meet this target. Bright areas are allowed to saturate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FitRange', 'type': 'str', 'value': 'FitRange', 'srcline': 97, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The histogram of the current image is measured, and the exposure time of the next image is adjusted so bright areas are not saturated', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'The following algorithms can be used to calculate auto exposure'}", &AvtVimbaCameraConfig::exposure_auto_alg)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto_alg", "str", 0, "The following algorithms can be used to calculate auto exposure", "{'enum': [{'name': 'Mean', 'type': 'str', 'value': 'Mean', 'srcline': 96, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] The arithmetic mean of the histogram of the current image is compared to ExposureAutoTarget, and the next image adjusted in exposure time to meet this target. Bright areas are allowed to saturate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FitRange', 'type': 'str', 'value': 'FitRange', 'srcline': 97, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The histogram of the current image is measured, and the exposure time of the next image is adjusted so bright areas are not saturated', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'The following algorithms can be used to calculate auto exposure'}", &AvtVimbaCameraConfig::exposure_auto_alg)));
      __min__.exposure_auto_tol = 0;
      __max__.exposure_auto_tol = 50;
      __default__.exposure_auto_tol = 5;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_tol", "int", 0, "Tolerance in variation from ExposureAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::exposure_auto_tol)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_tol", "int", 0, "Tolerance in variation from ExposureAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::exposure_auto_tol)));
      __min__.exposure_auto_max = 41;
      __max__.exposure_auto_max = 60000000;
      __default__.exposure_auto_max = 50000;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_max", "int", 0, "The max exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_max)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_max", "int", 0, "The max exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_max)));
      __min__.exposure_auto_min = 41;
      __max__.exposure_auto_min = 60000000;
      __default__.exposure_auto_min = 41;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_min", "int", 0, "The min exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_min)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_min", "int", 0, "The min exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_min)));
      __min__.exposure_auto_outliers = 0;
      __max__.exposure_auto_outliers = 10000;
      __default__.exposure_auto_outliers = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01% increments)", "", &AvtVimbaCameraConfig::exposure_auto_outliers)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01% increments)", "", &AvtVimbaCameraConfig::exposure_auto_outliers)));
      __min__.exposure_auto_rate = 0;
      __max__.exposure_auto_rate = 100;
      __default__.exposure_auto_rate = 100;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_rate", "int", 0, "The rate at which the auto exposure function changes the exposure setting.100% is auto exposure adjustments running at full speed, and 50% is half speed.", "", &AvtVimbaCameraConfig::exposure_auto_rate)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_rate", "int", 0, "The rate at which the auto exposure function changes the exposure setting.100% is auto exposure adjustments running at full speed, and 50% is half speed.", "", &AvtVimbaCameraConfig::exposure_auto_rate)));
      __min__.exposure_auto_target = 0;
      __max__.exposure_auto_target = 100;
      __default__.exposure_auto_target = 50;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_target", "int", 0, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", "", &AvtVimbaCameraConfig::exposure_auto_target)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_target", "int", 0, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", "", &AvtVimbaCameraConfig::exposure_auto_target)));
      __min__.gain = 0.0;
      __max__.gain = 32.0;
      __default__.gain = 0.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain", "double", 0, "The gain level in dB.", "", &AvtVimbaCameraConfig::gain)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain", "double", 0, "The gain level in dB.", "", &AvtVimbaCameraConfig::gain)));
      __min__.gain_auto = "";
      __max__.gain_auto = "";
      __default__.gain_auto = "Continuous";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("gain_auto", "str", 0, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::gain_auto)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("gain_auto", "str", 0, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::gain_auto)));
      __min__.gain_auto_tol = 0;
      __max__.gain_auto_tol = 50;
      __default__.gain_auto_tol = 5;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_tol", "int", 0, "Tolerance in variation from GainAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::gain_auto_tol)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_tol", "int", 0, "Tolerance in variation from GainAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::gain_auto_tol)));
      __min__.gain_auto_max = 0.0;
      __max__.gain_auto_max = 32.0;
      __default__.gain_auto_max = 32.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_max", "double", 0, "The max gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_max)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_max", "double", 0, "The max gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_max)));
      __min__.gain_auto_min = 0.0;
      __max__.gain_auto_min = 32.0;
      __default__.gain_auto_min = 0.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_min", "double", 0, "The min gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_min)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_min", "double", 0, "The min gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_min)));
      __min__.gain_auto_outliers = 0;
      __max__.gain_auto_outliers = 10000;
      __default__.gain_auto_outliers = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01% increments).", "", &AvtVimbaCameraConfig::gain_auto_outliers)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01% increments).", "", &AvtVimbaCameraConfig::gain_auto_outliers)));
      __min__.gain_auto_rate = 0;
      __max__.gain_auto_rate = 100;
      __default__.gain_auto_rate = 100;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_rate", "int", 0, "The rate percentage at which the auto gain function changes.", "", &AvtVimbaCameraConfig::gain_auto_rate)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_rate", "int", 0, "The rate percentage at which the auto gain function changes.", "", &AvtVimbaCameraConfig::gain_auto_rate)));
      __min__.gain_auto_target = 0;
      __max__.gain_auto_target = 100;
      __default__.gain_auto_target = 50;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_target", "int", 0, "The general lightness or darkness of the auto gain feature. A percentage of maximum brightness.", "", &AvtVimbaCameraConfig::gain_auto_target)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_target", "int", 0, "The general lightness or darkness of the auto gain feature. A percentage of maximum brightness.", "", &AvtVimbaCameraConfig::gain_auto_target)));
      __min__.balance_ratio_abs = 0.25;
      __max__.balance_ratio_abs = 4.0;
      __default__.balance_ratio_abs = 1.0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("balance_ratio_abs", "double", 0, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", "", &AvtVimbaCameraConfig::balance_ratio_abs)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("balance_ratio_abs", "double", 0, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", "", &AvtVimbaCameraConfig::balance_ratio_abs)));
      __min__.balance_ratio_selector = "";
      __max__.balance_ratio_selector = "";
      __default__.balance_ratio_selector = "Red";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("balance_ratio_selector", "str", 0, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", "{'enum': [{'name': 'Red', 'type': 'str', 'value': 'Red', 'srcline': 70, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Blue', 'type': 'str', 'value': 'Blue', 'srcline': 71, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select the Red or Blue channel to adjust with `~BalanceRatioAbs`'}", &AvtVimbaCameraConfig::balance_ratio_selector)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("balance_ratio_selector", "str", 0, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", "{'enum': [{'name': 'Red', 'type': 'str', 'value': 'Red', 'srcline': 70, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Blue', 'type': 'str', 'value': 'Blue', 'srcline': 71, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select the Red or Blue channel to adjust with `~BalanceRatioAbs`'}", &AvtVimbaCameraConfig::balance_ratio_selector)));
      __min__.whitebalance_auto = "";
      __max__.whitebalance_auto = "";
      __default__.whitebalance_auto = "Continuous";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("whitebalance_auto", "str", 0, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::whitebalance_auto)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("whitebalance_auto", "str", 0, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::whitebalance_auto)));
      __min__.whitebalance_auto_tol = 0;
      __max__.whitebalance_auto_tol = 50;
      __default__.whitebalance_auto_tol = 5;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_tol", "int", 0, "Tolerance allowed from the ideal white balance values", "", &AvtVimbaCameraConfig::whitebalance_auto_tol)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_tol", "int", 0, "Tolerance allowed from the ideal white balance values", "", &AvtVimbaCameraConfig::whitebalance_auto_tol)));
      __min__.whitebalance_auto_rate = 1;
      __max__.whitebalance_auto_rate = 100;
      __default__.whitebalance_auto_rate = 100;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_rate", "int", 0, "Rate of white balance adjustments, from 1 (slowest) to 100 (fastest).", "", &AvtVimbaCameraConfig::whitebalance_auto_rate)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_rate", "int", 0, "Rate of white balance adjustments, from 1 (slowest) to 100 (fastest).", "", &AvtVimbaCameraConfig::whitebalance_auto_rate)));
      __min__.binning_x = 1;
      __max__.binning_x = 8;
      __default__.binning_x = 1;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_x", "int", 0, "Number of pixels to bin together horizontally.", "", &AvtVimbaCameraConfig::binning_x)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_x", "int", 0, "Number of pixels to bin together horizontally.", "", &AvtVimbaCameraConfig::binning_x)));
      __min__.binning_y = 1;
      __max__.binning_y = 14;
      __default__.binning_y = 1;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_y", "int", 0, "Number of pixels to bin together vertically.", "", &AvtVimbaCameraConfig::binning_y)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_y", "int", 0, "Number of pixels to bin together vertically.", "", &AvtVimbaCameraConfig::binning_y)));
      __min__.decimation_x = 1;
      __max__.decimation_x = 8;
      __default__.decimation_x = 1;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_x", "int", 0, "Number of decimation operations in x.", "", &AvtVimbaCameraConfig::decimation_x)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_x", "int", 0, "Number of decimation operations in x.", "", &AvtVimbaCameraConfig::decimation_x)));
      __min__.decimation_y = 1;
      __max__.decimation_y = 8;
      __default__.decimation_y = 1;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_y", "int", 0, "Number of decimation operations in y.", "", &AvtVimbaCameraConfig::decimation_y)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_y", "int", 0, "Number of decimation operations in y.", "", &AvtVimbaCameraConfig::decimation_y)));
      __min__.width = 1;
      __max__.width = 4096;
      __default__.width = 4096;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("width", "int", 0, "Width of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::width)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("width", "int", 0, "Width of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::width)));
      __min__.height = 1;
      __max__.height = 4096;
      __default__.height = 4096;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("height", "int", 0, "Height of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::height)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("height", "int", 0, "Height of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::height)));
      __min__.roi_width = 0;
      __max__.roi_width = 4095;
      __default__.roi_width = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_width", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_width)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_width", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_width)));
      __min__.roi_height = 0;
      __max__.roi_height = 4095;
      __default__.roi_height = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_height", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_height)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_height", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_height)));
      __min__.roi_offset_x = 0;
      __max__.roi_offset_x = 4095;
      __default__.roi_offset_x = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_offset_x", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_offset_x)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_offset_x", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_offset_x)));
      __min__.roi_offset_y = 0;
      __max__.roi_offset_y = 4095;
      __default__.roi_offset_y = 0;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_offset_y", "int", 0, "Y offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_offset_y)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("roi_offset_y", "int", 0, "Y offset of the region of interest.", "", &AvtVimbaCameraConfig::roi_offset_y)));
      __min__.pixel_format = "";
      __max__.pixel_format = "";
      __default__.pixel_format = "Mono8";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("pixel_format", "str", 3, "Format of the image data.", "{'enum': [{'name': 'Mono8', 'type': 'str', 'value': 'Mono8', 'srcline': 38, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10', 'type': 'str', 'value': 'Mono10', 'srcline': 39, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10Packed', 'type': 'str', 'value': 'Mono10Packed', 'srcline': 40, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12', 'type': 'str', 'value': 'Mono12', 'srcline': 41, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12Packed', 'type': 'str', 'value': 'Mono12Packed', 'srcline': 42, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR8', 'type': 'str', 'value': 'BayerGR8', 'srcline': 43, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG8', 'type': 'str', 'value': 'BayerRG8', 'srcline': 44, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB8', 'type': 'str', 'value': 'BayerGB8', 'srcline': 45, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG8', 'type': 'str', 'value': 'BayerBG8', 'srcline': 46, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10', 'type': 'str', 'value': 'BayerGR10', 'srcline': 47, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10', 'type': 'str', 'value': 'BayerRG10', 'srcline': 48, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10', 'type': 'str', 'value': 'BayerGB10', 'srcline': 49, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10', 'type': 'str', 'value': 'BayerBG10', 'srcline': 50, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12', 'type': 'str', 'value': 'BayerGR12', 'srcline': 51, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12', 'type': 'str', 'value': 'BayerRG12', 'srcline': 52, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12', 'type': 'str', 'value': 'BayerGB12', 'srcline': 53, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12', 'type': 'str', 'value': 'BayerBG12', 'srcline': 54, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10Packed', 'type': 'str', 'value': 'BayerGR10Packed', 'srcline': 55, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10Packed', 'type': 'str', 'value': 'BayerRG10Packed', 'srcline': 56, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10Packed', 'type': 'str', 'value': 'BayerGB10Packed', 'srcline': 57, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10Packed', 'type': 'str', 'value': 'BayerBG10Packed', 'srcline': 58, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12Packed', 'type': 'str', 'value': 'BayerGR12Packed', 'srcline': 59, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12Packed', 'type': 'str', 'value': 'BayerRG12Packed', 'srcline': 60, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12Packed', 'type': 'str', 'value': 'BayerGB12Packed', 'srcline': 61, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12Packed', 'type': 'str', 'value': 'BayerBG12Packed', 'srcline': 62, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'RGB8Packed', 'type': 'str', 'value': 'RGB8Packed', 'srcline': 63, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BGR8Packed', 'type': 'str', 'value': 'BGR8Packed', 'srcline': 64, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Pixel Format'}", &AvtVimbaCameraConfig::pixel_format)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("pixel_format", "str", 3, "Format of the image data.", "{'enum': [{'name': 'Mono8', 'type': 'str', 'value': 'Mono8', 'srcline': 38, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10', 'type': 'str', 'value': 'Mono10', 'srcline': 39, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10Packed', 'type': 'str', 'value': 'Mono10Packed', 'srcline': 40, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12', 'type': 'str', 'value': 'Mono12', 'srcline': 41, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12Packed', 'type': 'str', 'value': 'Mono12Packed', 'srcline': 42, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR8', 'type': 'str', 'value': 'BayerGR8', 'srcline': 43, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG8', 'type': 'str', 'value': 'BayerRG8', 'srcline': 44, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB8', 'type': 'str', 'value': 'BayerGB8', 'srcline': 45, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG8', 'type': 'str', 'value': 'BayerBG8', 'srcline': 46, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10', 'type': 'str', 'value': 'BayerGR10', 'srcline': 47, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10', 'type': 'str', 'value': 'BayerRG10', 'srcline': 48, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10', 'type': 'str', 'value': 'BayerGB10', 'srcline': 49, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10', 'type': 'str', 'value': 'BayerBG10', 'srcline': 50, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12', 'type': 'str', 'value': 'BayerGR12', 'srcline': 51, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12', 'type': 'str', 'value': 'BayerRG12', 'srcline': 52, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12', 'type': 'str', 'value': 'BayerGB12', 'srcline': 53, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12', 'type': 'str', 'value': 'BayerBG12', 'srcline': 54, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10Packed', 'type': 'str', 'value': 'BayerGR10Packed', 'srcline': 55, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10Packed', 'type': 'str', 'value': 'BayerRG10Packed', 'srcline': 56, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10Packed', 'type': 'str', 'value': 'BayerGB10Packed', 'srcline': 57, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10Packed', 'type': 'str', 'value': 'BayerBG10Packed', 'srcline': 58, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12Packed', 'type': 'str', 'value': 'BayerGR12Packed', 'srcline': 59, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12Packed', 'type': 'str', 'value': 'BayerRG12Packed', 'srcline': 60, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12Packed', 'type': 'str', 'value': 'BayerGB12Packed', 'srcline': 61, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12Packed', 'type': 'str', 'value': 'BayerBG12Packed', 'srcline': 62, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'RGB8Packed', 'type': 'str', 'value': 'RGB8Packed', 'srcline': 63, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BGR8Packed', 'type': 'str', 'value': 'BGR8Packed', 'srcline': 64, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Pixel Format'}", &AvtVimbaCameraConfig::pixel_format)));
      __min__.stream_bytes_per_second = 1;
      __max__.stream_bytes_per_second = 115000000;
      __default__.stream_bytes_per_second = 45000000;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("stream_bytes_per_second", "int", 0, "Limits the data rate of the camera.", "", &AvtVimbaCameraConfig::stream_bytes_per_second)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("stream_bytes_per_second", "int", 0, "Limits the data rate of the camera.", "", &AvtVimbaCameraConfig::stream_bytes_per_second)));
      __min__.ptp_mode = "";
      __max__.ptp_mode = "";
      __default__.ptp_mode = "Off";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("ptp_mode", "str", 0, "Controls the PTP behavior of the clock port.", "{'enum': [{'name': 'PtpOff', 'type': 'str', 'value': 'Off', 'srcline': 74, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpSlave', 'type': 'str', 'value': 'Slave', 'srcline': 75, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpMaster', 'type': 'str', 'value': 'Master', 'srcline': 76, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpAuto', 'type': 'str', 'value': 'Auto', 'srcline': 77, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select PrecissionTimeProtocol Mode'}", &AvtVimbaCameraConfig::ptp_mode)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("ptp_mode", "str", 0, "Controls the PTP behavior of the clock port.", "{'enum': [{'name': 'PtpOff', 'type': 'str', 'value': 'Off', 'srcline': 74, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpSlave', 'type': 'str', 'value': 'Slave', 'srcline': 75, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpMaster', 'type': 'str', 'value': 'Master', 'srcline': 76, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpAuto', 'type': 'str', 'value': 'Auto', 'srcline': 77, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select PrecissionTimeProtocol Mode'}", &AvtVimbaCameraConfig::ptp_mode)));
      __min__.sync_in_selector = "";
      __max__.sync_in_selector = "";
      __default__.sync_in_selector = "SyncIn1";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_in_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncIn1', 'type': 'str', 'value': 'SyncIn1', 'srcline': 78, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn2', 'type': 'str', 'value': 'SyncIn2', 'srcline': 79, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn3', 'type': 'str', 'value': 'SyncIn3', 'srcline': 80, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn4', 'type': 'str', 'value': 'SyncIn4', 'srcline': 81, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-in selector'}", &AvtVimbaCameraConfig::sync_in_selector)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_in_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncIn1', 'type': 'str', 'value': 'SyncIn1', 'srcline': 78, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn2', 'type': 'str', 'value': 'SyncIn2', 'srcline': 79, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn3', 'type': 'str', 'value': 'SyncIn3', 'srcline': 80, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn4', 'type': 'str', 'value': 'SyncIn4', 'srcline': 81, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-in selector'}", &AvtVimbaCameraConfig::sync_in_selector)));
      __min__.sync_out_polarity = "";
      __max__.sync_out_polarity = "";
      __default__.sync_out_polarity = "Normal";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_polarity", "str", 1, "Polarity applied to the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'Normal', 'type': 'str', 'value': 'Normal', 'srcline': 72, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Invert', 'type': 'str', 'value': 'Invert', 'srcline': 73, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Polarity'}", &AvtVimbaCameraConfig::sync_out_polarity)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_polarity", "str", 1, "Polarity applied to the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'Normal', 'type': 'str', 'value': 'Normal', 'srcline': 72, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Invert', 'type': 'str', 'value': 'Invert', 'srcline': 73, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Polarity'}", &AvtVimbaCameraConfig::sync_out_polarity)));
      __min__.sync_out_selector = "";
      __max__.sync_out_selector = "";
      __default__.sync_out_selector = "SyncOut1";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncOut1', 'type': 'str', 'value': 'SyncOut1', 'srcline': 82, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 83, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 84, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 85, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncOut1', 'type': 'str', 'value': 'SyncOut1', 'srcline': 82, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 83, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 84, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 85, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
      __min__.sync_out_source = "";
      __max__.sync_out_source = "";
      __default__.sync_out_source = "GPO";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_source", "str", 1, "Signal source of the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'GPO', 'type': 'str', 'value': 'GPO', 'srcline': 86, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionTriggerReady', 'type': 'str', 'value': 'AcquisitionTriggerReady', 'srcline': 87, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTriggerReady', 'type': 'str', 'value': 'FrameTriggerReady', 'srcline': 88, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTrigger', 'type': 'str', 'value': 'FrameTrigger', 'srcline': 89, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Exposing', 'type': 'str', 'value': 'Exposing', 'srcline': 90, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameReadout', 'type': 'str', 'value': 'FrameReadout', 'srcline': 91, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Imaging', 'type': 'str', 'value': 'Imaging', 'srcline': 92, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Acquiring', 'type': 'str', 'value': 'Acquiring', 'srcline': 93, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn1', 'type': 'str', 'value': 'LineIn1', 'srcline': 94, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn2', 'type': 'str', 'value': 'LineIn2', 'srcline': 95, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out signal'}", &AvtVimbaCameraConfig::sync_out_source)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_source", "str", 1, "Signal source of the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'GPO', 'type': 'str', 'value': 'GPO', 'srcline': 86, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionTriggerReady', 'type': 'str', 'value': 'AcquisitionTriggerReady', 'srcline': 87, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTriggerReady', 'type': 'str', 'value': 'FrameTriggerReady', 'srcline': 88, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTrigger', 'type': 'str', 'value': 'FrameTrigger', 'srcline': 89, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Exposing', 'type': 'str', 'value': 'Exposing', 'srcline': 90, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameReadout', 'type': 'str', 'value': 'FrameReadout', 'srcline': 91, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Imaging', 'type': 'str', 'value': 'Imaging', 'srcline': 92, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Acquiring', 'type': 'str', 'value': 'Acquiring', 'srcline': 93, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn1', 'type': 'str', 'value': 'LineIn1', 'srcline': 94, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn2', 'type': 'str', 'value': 'LineIn2', 'srcline': 95, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out signal'}", &AvtVimbaCameraConfig::sync_out_source)));
      __min__.iris_auto_target = 0;
      __max__.iris_auto_target = 100;
      __default__.iris_auto_target = 50;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_auto_target", "int", 0, "This is the target image mean value, in percent.", "", &AvtVimbaCameraConfig::iris_auto_target)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_auto_target", "int", 0, "This is the target image mean value, in percent.", "", &AvtVimbaCameraConfig::iris_auto_target)));
      __min__.iris_mode = "";
      __max__.iris_mode = "";
      __default__.iris_mode = "Continuous";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("iris_mode", "str", 0, "Set the iris mode. Disabled: no iris control. Video: enable video iris. VideoOpen: fully open a video iris. VideoClose: fully close a video iris.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::iris_mode)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("iris_mode", "str", 0, "Set the iris mode. Disabled: no iris control. Video: enable video iris. VideoOpen: fully open a video iris. VideoClose: fully close a video iris.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 67, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 68, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 69, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::iris_mode)));
      __min__.iris_video_level_min = 0;
      __max__.iris_video_level_min = 150;
      __default__.iris_video_level_min = 110;
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_min", "int", 0, "Minimum video iris level output by the camera, in approximately mV pp. A higher minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_min)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_min", "int", 0, "Minimum video iris level output by the camera, in approximately mV pp. A higher minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_min)));
      __min__.iris_video_level_max = 0;
      __max__.iris_video_level_max = 150;
      __default__.iris_video_level_max = 110;
      //Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("use_ros_timestamp", "str", 1, "Set to 'false' to use camera timestamp.", "{'enum': [{'name': 'UseRosTimestamp', 'type': 'str', 'value': 'UseRosTimestamp', 'srcline': 82, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 83, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 84, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 85, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
      //__param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("use_ros_timestamp", "str", 1, "When set to 'false' use the camera frame timestamp.", "{'enum': [{'name': 'SyncOut1', 'type': 'str', 'value': 'SyncOut1', 'srcline': 82, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 83, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 84, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 85, 'srcfile': '/home/rti/devl/ros1/camera/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
      //__min__.sync_out_source = "";
      //__max__.sync_out_source = "";
      //__default__.sync_out_source = "UseRosTimestamp";
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_max", "int", 0, "Maximum video iris level output by the camera, in approximately mV pp. A lower minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_max)));
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_max", "int", 0, "Maximum video iris level output by the camera, in approximately mV pp. A lower minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_max)));
      Default.convertParams();
      __group_descriptions__.push_back(AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr(new AvtVimbaCameraConfig::GroupDescription<AvtVimbaCameraConfig::DEFAULT, AvtVimbaCameraConfig>(Default)));

      for (std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    AvtVimbaCameraConfig __max__;
    AvtVimbaCameraConfig __min__;
    AvtVimbaCameraConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const AvtVimbaCameraConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static AvtVimbaCameraConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &AvtVimbaCameraConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr> &AvtVimbaCameraConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> &AvtVimbaCameraConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const AvtVimbaCameraConfigStatics *AvtVimbaCameraConfig::__get_statics__()
  {
    const static AvtVimbaCameraConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = AvtVimbaCameraConfigStatics::get_instance();

    return statics;
  }
      const char * const AvtVimbaCamera_Freerun = "Freerun";
      const char * const AvtVimbaCamera_Line1 = "Line1";
      const char * const AvtVimbaCamera_Line2 = "Line2";
      const char * const AvtVimbaCamera_Line3 = "Line3";
      const char * const AvtVimbaCamera_Line4 = "Line4";
      const char * const AvtVimbaCamera_FixedRate = "FixedRate";
      const char * const AvtVimbaCamera_Software = "Software";
      const char * const AvtVimbaCamera_RisingEdge = "RisingEdge";
      const char * const AvtVimbaCamera_FallingEdge = "FallingEdge";
      const char * const AvtVimbaCamera_AnyEdge = "AnyEdge";
      const char * const AvtVimbaCamera_LevelHigh = "LevelHigh";
      const char * const AvtVimbaCamera_LevelLow = "LevelLow";
      const char * const AvtVimbaCamera_ModeOn = "On";
      const char * const AvtVimbaCamera_ModeOff = "Off";
      const char * const AvtVimbaCamera_FrameStart = "FrameStart";
      const char * const AvtVimbaCamera_AcquisitionStart = "AcquisitionStart";
      const char * const AvtVimbaCamera_AcquisitionEnd = "AcquisitionEnd";
      const char * const AvtVimbaCamera_AcquisitionRecord = "AcquisitionRecord";
      const char * const AvtVimbaCamera_Continuous = "Continuous";
      const char * const AvtVimbaCamera_SingleFrame = "SingleFrame";
      const char * const AvtVimbaCamera_MultiFrame = "MultiFrame";
      const char * const AvtVimbaCamera_Recorder = "Recorder";
      const char * const AvtVimbaCamera_Mono8 = "Mono8";
      const char * const AvtVimbaCamera_Mono10 = "Mono10";
      const char * const AvtVimbaCamera_Mono10Packed = "Mono10Packed";
      const char * const AvtVimbaCamera_Mono12 = "Mono12";
      const char * const AvtVimbaCamera_Mono12Packed = "Mono12Packed";
      const char * const AvtVimbaCamera_BayerGR8 = "BayerGR8";
      const char * const AvtVimbaCamera_BayerRG8 = "BayerRG8";
      const char * const AvtVimbaCamera_BayerGB8 = "BayerGB8";
      const char * const AvtVimbaCamera_BayerBG8 = "BayerBG8";
      const char * const AvtVimbaCamera_BayerGR10 = "BayerGR10";
      const char * const AvtVimbaCamera_BayerRG10 = "BayerRG10";
      const char * const AvtVimbaCamera_BayerGB10 = "BayerGB10";
      const char * const AvtVimbaCamera_BayerBG10 = "BayerBG10";
      const char * const AvtVimbaCamera_BayerGR12 = "BayerGR12";
      const char * const AvtVimbaCamera_BayerRG12 = "BayerRG12";
      const char * const AvtVimbaCamera_BayerGB12 = "BayerGB12";
      const char * const AvtVimbaCamera_BayerBG12 = "BayerBG12";
      const char * const AvtVimbaCamera_BayerGR10Packed = "BayerGR10Packed";
      const char * const AvtVimbaCamera_BayerRG10Packed = "BayerRG10Packed";
      const char * const AvtVimbaCamera_BayerGB10Packed = "BayerGB10Packed";
      const char * const AvtVimbaCamera_BayerBG10Packed = "BayerBG10Packed";
      const char * const AvtVimbaCamera_BayerGR12Packed = "BayerGR12Packed";
      const char * const AvtVimbaCamera_BayerRG12Packed = "BayerRG12Packed";
      const char * const AvtVimbaCamera_BayerGB12Packed = "BayerGB12Packed";
      const char * const AvtVimbaCamera_BayerBG12Packed = "BayerBG12Packed";
      const char * const AvtVimbaCamera_RGB8Packed = "RGB8Packed";
      const char * const AvtVimbaCamera_BGR8Packed = "BGR8Packed";
      const char * const AvtVimbaCamera_Off = "Off";
      const char * const AvtVimbaCamera_Once = "Once";
      const char * const AvtVimbaCamera_Auto = "Continuous";
      const char * const AvtVimbaCamera_Red = "Red";
      const char * const AvtVimbaCamera_Blue = "Blue";
      const char * const AvtVimbaCamera_Normal = "Normal";
      const char * const AvtVimbaCamera_Invert = "Invert";
      const char * const AvtVimbaCamera_PtpOff = "Off";
      const char * const AvtVimbaCamera_PtpSlave = "Slave";
      const char * const AvtVimbaCamera_PtpMaster = "Master";
      const char * const AvtVimbaCamera_PtpAuto = "Auto";
      const char * const AvtVimbaCamera_SyncIn1 = "SyncIn1";
      const char * const AvtVimbaCamera_SyncIn2 = "SyncIn2";
      const char * const AvtVimbaCamera_SyncIn3 = "SyncIn3";
      const char * const AvtVimbaCamera_SyncIn4 = "SyncIn4";
      const char * const AvtVimbaCamera_SyncOut1 = "SyncOut1";
      const char * const AvtVimbaCamera_SyncOut2 = "SyncOut2";
      const char * const AvtVimbaCamera_SyncOut3 = "SyncOut3";
      const char * const AvtVimbaCamera_SyncOut4 = "SyncOut4";
      const char * const AvtVimbaCamera_GPO = "GPO";
      const char * const AvtVimbaCamera_AcquisitionTriggerReady = "AcquisitionTriggerReady";
      const char * const AvtVimbaCamera_FrameTriggerReady = "FrameTriggerReady";
      const char * const AvtVimbaCamera_FrameTrigger = "FrameTrigger";
      const char * const AvtVimbaCamera_Exposing = "Exposing";
      const char * const AvtVimbaCamera_FrameReadout = "FrameReadout";
      const char * const AvtVimbaCamera_Imaging = "Imaging";
      const char * const AvtVimbaCamera_Acquiring = "Acquiring";
      const char * const AvtVimbaCamera_LineIn1 = "LineIn1";
      const char * const AvtVimbaCamera_LineIn2 = "LineIn2";
      const char * const AvtVimbaCamera_Mean = "Mean";
      const char * const AvtVimbaCamera_FitRange = "FitRange";
#endif // np
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __AVTVIMBACAMERARECONFIGURATOR_H__